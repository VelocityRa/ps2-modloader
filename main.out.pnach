// /mnt/c/Code/cpp/ps2modloader/main.out.asm

// Function: _GLOBAL__sub_D__Z7ta_initPKvS0_jjj
patch=0,EE,01E5E000,word,08797ba0 // j	1e5ee80 <__static_initialization_and_destruction_0(int, int) [clone .constprop.0]>
patch=0,EE,01E5E004,word,00002025 // move	a0,zero

// Function: _GLOBAL__sub_I__Z7ta_initPKvS0_jjj
patch=0,EE,01E5E008,word,08797ba0 // j	1e5ee80 <__static_initialization_and_destruction_0(int, int) [clone .constprop.0]>
patch=0,EE,01E5E00C,word,24040001 // li	a0,1

// Function: etl::exception::exception(char const*, char const*, int)
patch=0,EE,01E5E010,word,ac850000 // sw	a1,0(a0)
patch=0,EE,01E5E014,word,ac860004 // sw	a2,4(a0)
patch=0,EE,01E5E018,word,03e00008 // jr	ra
patch=0,EE,01E5E01C,word,ac870008 // sw	a3,8(a0)

// Function: insert_block(Block*)
patch=0,EE,01E5E020,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E024,word,00001825 // move	v1,zero
patch=0,EE,01E5E028,word,8c460020 // lw	a2,32(v0)
patch=0,EE,01E5E02C,word,8cc20000 // lw	v0,0(a2)
patch=0,EE,01E5E030,word,14400006 // bnez	v0,1e5e04c <insert_block(Block*)+0x2c>
patch=0,EE,01E5E034,word,00000000 // nop
patch=0,EE,01E5E038,word,1060000c // beqz	v1,1e5e06c <insert_block(Block*)+0x4c>
patch=0,EE,01E5E03C,word,00000000 // nop
patch=0,EE,01E5E040,word,ac640004 // sw	a0,4(v1)
patch=0,EE,01E5E044,word,03e00008 // jr	ra
patch=0,EE,01E5E048,word,ac820004 // sw	v0,4(a0)
patch=0,EE,01E5E04C,word,8c850000 // lw	a1,0(a0)
patch=0,EE,01E5E050,word,8c470000 // lw	a3,0(v0)
patch=0,EE,01E5E054,word,00e5282b // sltu	a1,a3,a1
patch=0,EE,01E5E058,word,10a0fff7 // beqz	a1,1e5e038 <insert_block(Block*)+0x18>
patch=0,EE,01E5E05C,word,00000000 // nop
patch=0,EE,01E5E060,word,00401825 // move	v1,v0
patch=0,EE,01E5E064,word,1000fff2 // b	1e5e030 <insert_block(Block*)+0x10>
patch=0,EE,01E5E068,word,8c420004 // lw	v0,4(v0)
patch=0,EE,01E5E06C,word,1000fff5 // b	1e5e044 <insert_block(Block*)+0x24>
patch=0,EE,01E5E070,word,acc40000 // sw	a0,0(a2)

// Function: release_blocks(Block*, Block*)
patch=0,EE,01E5E074,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E078,word,8c420020 // lw	v0,32(v0)
patch=0,EE,01E5E07C,word,14850003 // bne	a0,a1,1e5e08c <release_blocks(Block*, Block*)+0x18>
patch=0,EE,01E5E080,word,00000000 // nop
patch=0,EE,01E5E084,word,03e00008 // jr	ra
patch=0,EE,01E5E088,word,00000000 // nop
patch=0,EE,01E5E08C,word,8c460008 // lw	a2,8(v0)
patch=0,EE,01E5E090,word,8c830004 // lw	v1,4(a0)
patch=0,EE,01E5E094,word,ac860004 // sw	a2,4(a0)
patch=0,EE,01E5E098,word,ac440008 // sw	a0,8(v0)
patch=0,EE,01E5E09C,word,ac800000 // sw	zero,0(a0)
patch=0,EE,01E5E0A0,word,ac800008 // sw	zero,8(a0)
patch=0,EE,01E5E0A4,word,1000fff5 // b	1e5e07c <release_blocks(Block*, Block*)+0x8>
patch=0,EE,01E5E0A8,word,00602025 // move	a0,v1

// Function: compact()
patch=0,EE,01E5E0AC,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E0B0,word,8c420020 // lw	v0,32(v0)
patch=0,EE,01E5E0B4,word,8c470000 // lw	a3,0(v0)
patch=0,EE,01E5E0B8,word,14e00019 // bnez	a3,1e5e120 <compact()+0x74>
patch=0,EE,01E5E0BC,word,00000000 // nop
patch=0,EE,01E5E0C0,word,03e00008 // jr	ra
patch=0,EE,01E5E0C4,word,00000000 // nop
patch=0,EE,01E5E0C8,word,8ce40004 // lw	a0,4(a3)
patch=0,EE,01E5E0CC,word,00e01025 // move	v0,a3
patch=0,EE,01E5E0D0,word,00801825 // move	v1,a0
patch=0,EE,01E5E0D4,word,14600009 // bnez	v1,1e5e0fc <compact()+0x50>
patch=0,EE,01E5E0D8,word,00000000 // nop
patch=0,EE,01E5E0DC,word,14e20024 // bne	a3,v0,1e5e170 <compact()+0xc4>
patch=0,EE,01E5E0E0,word,00000000 // nop
patch=0,EE,01E5E0E4,word,8ce70004 // lw	a3,4(a3)
patch=0,EE,01E5E0E8,word,14e0fff7 // bnez	a3,1e5e0c8 <compact()+0x1c>
patch=0,EE,01E5E0EC,word,00000000 // nop
patch=0,EE,01E5E0F0,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5E0F4,word,03e00008 // jr	ra
patch=0,EE,01E5E0F8,word,27bd0010 // addiu	sp,sp,16
patch=0,EE,01E5E0FC,word,8c460008 // lw	a2,8(v0)
patch=0,EE,01E5E100,word,8c450000 // lw	a1,0(v0)
patch=0,EE,01E5E104,word,00a62821 // addu	a1,a1,a2
patch=0,EE,01E5E108,word,8c660000 // lw	a2,0(v1)
patch=0,EE,01E5E10C,word,14c5fff3 // bne	a2,a1,1e5e0dc <compact()+0x30>
patch=0,EE,01E5E110,word,00000000 // nop
patch=0,EE,01E5E114,word,00601025 // move	v0,v1
patch=0,EE,01E5E118,word,1000ffee // b	1e5e0d4 <compact()+0x28>
patch=0,EE,01E5E11C,word,8c630004 // lw	v1,4(v1)
patch=0,EE,01E5E120,word,8ce40004 // lw	a0,4(a3)
patch=0,EE,01E5E124,word,00e01025 // move	v0,a3
patch=0,EE,01E5E128,word,00801825 // move	v1,a0
patch=0,EE,01E5E12C,word,14600005 // bnez	v1,1e5e144 <compact()+0x98>
patch=0,EE,01E5E130,word,00000000 // nop
patch=0,EE,01E5E134,word,14e2000c // bne	a3,v0,1e5e168 <compact()+0xbc>
patch=0,EE,01E5E138,word,00000000 // nop
patch=0,EE,01E5E13C,word,1000ffde // b	1e5e0b8 <compact()+0xc>
patch=0,EE,01E5E140,word,8ce70004 // lw	a3,4(a3)
patch=0,EE,01E5E144,word,8c460008 // lw	a2,8(v0)
patch=0,EE,01E5E148,word,8c450000 // lw	a1,0(v0)
patch=0,EE,01E5E14C,word,00a62821 // addu	a1,a1,a2
patch=0,EE,01E5E150,word,8c660000 // lw	a2,0(v1)
patch=0,EE,01E5E154,word,14c5fff7 // bne	a2,a1,1e5e134 <compact()+0x88>
patch=0,EE,01E5E158,word,00000000 // nop
patch=0,EE,01E5E15C,word,00601025 // move	v0,v1
patch=0,EE,01E5E160,word,1000fff2 // b	1e5e12c <compact()+0x80>
patch=0,EE,01E5E164,word,8c630004 // lw	v1,4(v1)
patch=0,EE,01E5E168,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5E16C,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5E170,word,8c450008 // lw	a1,8(v0)
patch=0,EE,01E5E174,word,8ce30000 // lw	v1,0(a3)
patch=0,EE,01E5E178,word,00a32823 // subu	a1,a1,v1
patch=0,EE,01E5E17C,word,8c430000 // lw	v1,0(v0)
patch=0,EE,01E5E180,word,00651821 // addu	v1,v1,a1
patch=0,EE,01E5E184,word,8c450004 // lw	a1,4(v0)
patch=0,EE,01E5E188,word,0c79781d // jal	1e5e074 <release_blocks(Block*, Block*)>
patch=0,EE,01E5E18C,word,ace30008 // sw	v1,8(a3)
patch=0,EE,01E5E190,word,1000ffd4 // b	1e5e0e4 <compact()+0x38>
patch=0,EE,01E5E194,word,ace50004 // sw	a1,4(a3)

// Function: alloc_block(unsigned int)
patch=0,EE,01E5E198,word,3c0301e6 // lui	v1,0x1e6
patch=0,EE,01E5E19C,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E1A0,word,8c63001c // lw	v1,28(v1)
patch=0,EE,01E5E1A4,word,2465ffff // addiu	a1,v1,-1
patch=0,EE,01E5E1A8,word,8c480020 // lw	a4,32(v0)
patch=0,EE,01E5E1AC,word,00a42821 // addu	a1,a1,a0
patch=0,EE,01E5E1B0,word,00031823 // negu	v1,v1
patch=0,EE,01E5E1B4,word,3c0401e6 // lui	a0,0x1e6
patch=0,EE,01E5E1B8,word,8d090000 // lw	a5,0(a4)
patch=0,EE,01E5E1BC,word,8c870018 // lw	a3,24(a0)
patch=0,EE,01E5E1C0,word,00651824 // and	v1,v1,a1
patch=0,EE,01E5E1C4,word,8d02000c // lw	v0,12(a4)
patch=0,EE,01E5E1C8,word,00002025 // move	a0,zero
patch=0,EE,01E5E1CC,word,15200011 // bnez	a5,1e5e214 <alloc_block(unsigned int)+0x7c>
patch=0,EE,01E5E1D0,word,00000000 // nop
patch=0,EE,01E5E1D4,word,8d040008 // lw	a0,8(a4)
patch=0,EE,01E5E1D8,word,10800027 // beqz	a0,1e5e278 <alloc_block(unsigned int)+0xe0>
patch=0,EE,01E5E1DC,word,00432821 // addu	a1,v0,v1
patch=0,EE,01E5E1E0,word,00e5382b // sltu	a3,a3,a1
patch=0,EE,01E5E1E4,word,14e00024 // bnez	a3,1e5e278 <alloc_block(unsigned int)+0xe0>
patch=0,EE,01E5E1E8,word,00000000 // nop
patch=0,EE,01E5E1EC,word,8c860004 // lw	a2,4(a0)
patch=0,EE,01E5E1F0,word,00804825 // move	a5,a0
patch=0,EE,01E5E1F4,word,ad060008 // sw	a2,8(a4)
patch=0,EE,01E5E1F8,word,ac820000 // sw	v0,0(a0)
patch=0,EE,01E5E1FC,word,8d020004 // lw	v0,4(a4)
patch=0,EE,01E5E200,word,ac820004 // sw	v0,4(a0)
patch=0,EE,01E5E204,word,ac830008 // sw	v1,8(a0)
patch=0,EE,01E5E208,word,ad040004 // sw	a0,4(a4)
patch=0,EE,01E5E20C,word,1000001a // b	1e5e278 <alloc_block(unsigned int)+0xe0>
patch=0,EE,01E5E210,word,ad05000c // sw	a1,12(a4)
patch=0,EE,01E5E214,word,8d250000 // lw	a1,0(a5)
patch=0,EE,01E5E218,word,8d260008 // lw	a2,8(a5)
patch=0,EE,01E5E21C,word,00a65821 // addu	a7,a1,a2
patch=0,EE,01E5E220,word,8d2a0004 // lw	a6,4(a5)
patch=0,EE,01E5E224,word,0162582b // sltu	a7,a7,v0
patch=0,EE,01E5E228,word,15600005 // bnez	a7,1e5e240 <alloc_block(unsigned int)+0xa8>
patch=0,EE,01E5E22C,word,00000000 // nop
patch=0,EE,01E5E230,word,00a35821 // addu	a7,a1,v1
patch=0,EE,01E5E234,word,00eb582b // sltu	a7,a3,a7
patch=0,EE,01E5E238,word,11600011 // beqz	a7,1e5e280 <alloc_block(unsigned int)+0xe8>
patch=0,EE,01E5E23C,word,00000000 // nop
patch=0,EE,01E5E240,word,00c3582b // sltu	a7,a2,v1
patch=0,EE,01E5E244,word,1560002a // bnez	a7,1e5e2f0 <alloc_block(unsigned int)+0x158>
patch=0,EE,01E5E248,word,00000000 // nop
patch=0,EE,01E5E24C,word,00001025 // move	v0,zero
patch=0,EE,01E5E250,word,1080000d // beqz	a0,1e5e288 <alloc_block(unsigned int)+0xf0>
patch=0,EE,01E5E254,word,00000000 // nop
patch=0,EE,01E5E258,word,ac8a0004 // sw	a6,4(a0)
patch=0,EE,01E5E25C,word,8d040004 // lw	a0,4(a4)
patch=0,EE,01E5E260,word,ad240004 // sw	a0,4(a5)
patch=0,EE,01E5E264,word,1040000a // beqz	v0,1e5e290 <alloc_block(unsigned int)+0xf8>
patch=0,EE,01E5E268,word,ad090004 // sw	a5,4(a4)
patch=0,EE,01E5E26C,word,00a32821 // addu	a1,a1,v1
patch=0,EE,01E5E270,word,ad230008 // sw	v1,8(a5)
patch=0,EE,01E5E274,word,ad05000c // sw	a1,12(a4)
patch=0,EE,01E5E278,word,03e00008 // jr	ra
patch=0,EE,01E5E27C,word,01201025 // move	v0,a5
patch=0,EE,01E5E280,word,1000fff3 // b	1e5e250 <alloc_block(unsigned int)+0xb8>
patch=0,EE,01E5E284,word,24020001 // li	v0,1
patch=0,EE,01E5E288,word,1000fff4 // b	1e5e25c <alloc_block(unsigned int)+0xc4>
patch=0,EE,01E5E28C,word,ad0a0000 // sw	a6,0(a4)
patch=0,EE,01E5E290,word,8d040008 // lw	a0,8(a4)
patch=0,EE,01E5E294,word,1080fff8 // beqz	a0,1e5e278 <alloc_block(unsigned int)+0xe0>
patch=0,EE,01E5E298,word,00000000 // nop
patch=0,EE,01E5E29C,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E2A0,word,00c33023 // subu	a2,a2,v1
patch=0,EE,01E5E2A4,word,8c420014 // lw	v0,20(v0)
patch=0,EE,01E5E2A8,word,00c2102b // sltu	v0,a2,v0
patch=0,EE,01E5E2AC,word,1440fff2 // bnez	v0,1e5e278 <alloc_block(unsigned int)+0xe0>
patch=0,EE,01E5E2B0,word,00000000 // nop
patch=0,EE,01E5E2B4,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5E2B8,word,8c820004 // lw	v0,4(a0)
patch=0,EE,01E5E2BC,word,00a32821 // addu	a1,a1,v1
patch=0,EE,01E5E2C0,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5E2C4,word,ad230008 // sw	v1,8(a5)
patch=0,EE,01E5E2C8,word,ad020008 // sw	v0,8(a4)
patch=0,EE,01E5E2CC,word,ac850000 // sw	a1,0(a0)
patch=0,EE,01E5E2D0,word,0c797808 // jal	1e5e020 <insert_block(Block*)>
patch=0,EE,01E5E2D4,word,ac860008 // sw	a2,8(a0)
patch=0,EE,01E5E2D8,word,0c79782b // jal	1e5e0ac <compact()>
patch=0,EE,01E5E2DC,word,00000000 // nop
patch=0,EE,01E5E2E0,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5E2E4,word,01201025 // move	v0,a5
patch=0,EE,01E5E2E8,word,03e00008 // jr	ra
patch=0,EE,01E5E2EC,word,27bd0010 // addiu	sp,sp,16
patch=0,EE,01E5E2F0,word,01202025 // move	a0,a5
patch=0,EE,01E5E2F4,word,1000ffb5 // b	1e5e1cc <alloc_block(unsigned int)+0x34>
patch=0,EE,01E5E2F8,word,01404825 // move	a5,a6

// Function: ta_alloc(unsigned int)
patch=0,EE,01E5E2FC,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5E300,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5E304,word,0c797866 // jal	1e5e198 <alloc_block(unsigned int)>
patch=0,EE,01E5E308,word,00000000 // nop
patch=0,EE,01E5E30C,word,10400002 // beqz	v0,1e5e318 <ta_alloc(unsigned int)+0x1c>
patch=0,EE,01E5E310,word,00000000 // nop
patch=0,EE,01E5E314,word,8c420000 // lw	v0,0(v0)
patch=0,EE,01E5E318,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5E31C,word,03e00008 // jr	ra
patch=0,EE,01E5E320,word,27bd0010 // addiu	sp,sp,16

// Function: etl::vector_base::vector_base(unsigned int)
patch=0,EE,01E5E324,word,03e00008 // jr	ra
patch=0,EE,01E5E328,word,ac850000 // sw	a1,0(a0)

// Function: etl::vector_base::~vector_base()
patch=0,EE,01E5E32C,word,03e00008 // jr	ra
patch=0,EE,01E5E330,word,00000000 // nop

// Function: etl::pvoidvector::push_back(void*)
patch=0,EE,01E5E334,word,8c820008 // lw	v0,8(a0)
patch=0,EE,01E5E338,word,24430004 // addiu	v1,v0,4
patch=0,EE,01E5E33C,word,ac830008 // sw	v1,8(a0)
patch=0,EE,01E5E340,word,03e00008 // jr	ra
patch=0,EE,01E5E344,word,ac450000 // sw	a1,0(v0)

// Function: etl::pvoidvector::size() const
patch=0,EE,01E5E348,word,8c820008 // lw	v0,8(a0)
patch=0,EE,01E5E34C,word,8c830004 // lw	v1,4(a0)
patch=0,EE,01E5E350,word,00431023 // subu	v0,v0,v1
patch=0,EE,01E5E354,word,03e00008 // jr	ra
patch=0,EE,01E5E358,word,00021083 // sra	v0,v0,0x2

// Function: etl::pvoidvector::full() const
patch=0,EE,01E5E35C,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5E360,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5E364,word,0c7978d2 // jal	1e5e348 <etl::pvoidvector::size() const>
patch=0,EE,01E5E368,word,00000000 // nop
patch=0,EE,01E5E36C,word,8c830000 // lw	v1,0(a0)
patch=0,EE,01E5E370,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5E374,word,00621026 // xor	v0,v1,v0
patch=0,EE,01E5E378,word,2c420001 // sltiu	v0,v0,1
patch=0,EE,01E5E37C,word,03e00008 // jr	ra
patch=0,EE,01E5E380,word,27bd0010 // addiu	sp,sp,16

// Function: etl::pvoidvector::initialise()
patch=0,EE,01E5E384,word,8c820004 // lw	v0,4(a0)
patch=0,EE,01E5E388,word,03e00008 // jr	ra
patch=0,EE,01E5E38C,word,ac820008 // sw	v0,8(a0)

// Function: etl::pvoidvector::clear()
patch=0,EE,01E5E390,word,087978e1 // j	1e5e384 <etl::pvoidvector::initialise()>
patch=0,EE,01E5E394,word,00000000 // nop

// Function: etl::ipool::is_item_in_pool(char const*) const
patch=0,EE,01E5E398,word,8c820000 // lw	v0,0(a0)
patch=0,EE,01E5E39C,word,00a22823 // subu	a1,a1,v0
patch=0,EE,01E5E3A0,word,8c860010 // lw	a2,16(a0)
patch=0,EE,01E5E3A4,word,04a0000b // bltz	a1,1e5e3d4 <etl::ipool::is_item_in_pool(char const*) const+0x3c>
patch=0,EE,01E5E3A8,word,00001025 // move	v0,zero
patch=0,EE,01E5E3AC,word,8c830014 // lw	v1,20(a0)
patch=0,EE,01E5E3B0,word,2463ffff // addiu	v1,v1,-1
patch=0,EE,01E5E3B4,word,00661818 // mult	v1,v1,a2
patch=0,EE,01E5E3B8,word,0065182a // slt	v1,v1,a1
patch=0,EE,01E5E3BC,word,14600005 // bnez	v1,1e5e3d4 <etl::ipool::is_item_in_pool(char const*) const+0x3c>
patch=0,EE,01E5E3C0,word,00000000 // nop
patch=0,EE,01E5E3C4,word,00a6001b // divu	zero,a1,a2
patch=0,EE,01E5E3C8,word,00c001f4 // teq	a2,zero,0x7
patch=0,EE,01E5E3CC,word,00002810 // mfhi	a1
patch=0,EE,01E5E3D0,word,2ca20001 // sltiu	v0,a1,1
patch=0,EE,01E5E3D4,word,03e00008 // jr	ra
patch=0,EE,01E5E3D8,word,00000000 // nop

// Function: etl::remove_reference<etl::pair<unsigned long const, HookData>&>::type&& etl::move<etl::pair<unsigned long const, HookData>&>(etl::pair<unsigned long const, HookData>&)
patch=0,EE,01E5E3DC,word,03e00008 // jr	ra
patch=0,EE,01E5E3E0,word,00801025 // move	v0,a0

// Function: etl::pair<unsigned long const, HookData>::pair<unsigned long const&, HookData>(etl::pair<unsigned long const&, HookData>&&)
patch=0,EE,01E5E3E4,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5E3E8,word,00801825 // move	v1,a0
patch=0,EE,01E5E3EC,word,8ca40000 // lw	a0,0(a1)
patch=0,EE,01E5E3F0,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5E3F4,word,0c7978f7 // jal	1e5e3dc <etl::remove_reference<etl::pair<unsigned long const, HookData>&>::type&& etl::move<etl::pair<unsigned long const, HookData>&>(etl::pair<unsigned long const, HookData>&)>
patch=0,EE,01E5E3F8,word,00000000 // nop
patch=0,EE,01E5E3FC,word,8c420000 // lw	v0,0(v0)
patch=0,EE,01E5E400,word,24a40004 // addiu	a0,a1,4
patch=0,EE,01E5E404,word,0c7978f7 // jal	1e5e3dc <etl::remove_reference<etl::pair<unsigned long const, HookData>&>::type&& etl::move<etl::pair<unsigned long const, HookData>&>(etl::pair<unsigned long const, HookData>&)>
patch=0,EE,01E5E408,word,ac620000 // sw	v0,0(v1)
patch=0,EE,01E5E40C,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5E410,word,8c440000 // lw	a0,0(v0)
patch=0,EE,01E5E414,word,ac640004 // sw	a0,4(v1)
patch=0,EE,01E5E418,word,8c440004 // lw	a0,4(v0)
patch=0,EE,01E5E41C,word,8c420008 // lw	v0,8(v0)
patch=0,EE,01E5E420,word,27bd0010 // addiu	sp,sp,16
patch=0,EE,01E5E424,word,ac640008 // sw	a0,8(v1)
patch=0,EE,01E5E428,word,03e00008 // jr	ra
patch=0,EE,01E5E42C,word,ac62000c // sw	v0,12(v1)

// Function: etl::pair<unsigned long const&, HookData>::pair<unsigned long const&, HookData>(unsigned long const&, HookData&&)
patch=0,EE,01E5E430,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5E434,word,00801825 // move	v1,a0
patch=0,EE,01E5E438,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5E43C,word,0c7978f7 // jal	1e5e3dc <etl::remove_reference<etl::pair<unsigned long const, HookData>&>::type&& etl::move<etl::pair<unsigned long const, HookData>&>(etl::pair<unsigned long const, HookData>&)>
patch=0,EE,01E5E440,word,00a02025 // move	a0,a1
patch=0,EE,01E5E444,word,00c02025 // move	a0,a2
patch=0,EE,01E5E448,word,0c7978f7 // jal	1e5e3dc <etl::remove_reference<etl::pair<unsigned long const, HookData>&>::type&& etl::move<etl::pair<unsigned long const, HookData>&>(etl::pair<unsigned long const, HookData>&)>
patch=0,EE,01E5E44C,word,ac620000 // sw	v0,0(v1)
patch=0,EE,01E5E450,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5E454,word,8c440000 // lw	a0,0(v0)
patch=0,EE,01E5E458,word,ac640004 // sw	a0,4(v1)
patch=0,EE,01E5E45C,word,8c440004 // lw	a0,4(v0)
patch=0,EE,01E5E460,word,8c420008 // lw	v0,8(v0)
patch=0,EE,01E5E464,word,27bd0010 // addiu	sp,sp,16
patch=0,EE,01E5E468,word,ac640008 // sw	a0,8(v1)
patch=0,EE,01E5E46C,word,03e00008 // jr	ra
patch=0,EE,01E5E470,word,ac62000c // sw	v0,12(v1)

// Function: etl::pair<unsigned long const&, HookData> etl::make_pair<unsigned long const&, HookData>(unsigned long const&, HookData&&)
patch=0,EE,01E5E474,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5E478,word,00803825 // move	a3,a0
patch=0,EE,01E5E47C,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5E480,word,0c7978f7 // jal	1e5e3dc <etl::remove_reference<etl::pair<unsigned long const, HookData>&>::type&& etl::move<etl::pair<unsigned long const, HookData>&>(etl::pair<unsigned long const, HookData>&)>
patch=0,EE,01E5E484,word,00a02025 // move	a0,a1
patch=0,EE,01E5E488,word,00c02025 // move	a0,a2
patch=0,EE,01E5E48C,word,0c7978f7 // jal	1e5e3dc <etl::remove_reference<etl::pair<unsigned long const, HookData>&>::type&& etl::move<etl::pair<unsigned long const, HookData>&>(etl::pair<unsigned long const, HookData>&)>
patch=0,EE,01E5E490,word,00402825 // move	a1,v0
patch=0,EE,01E5E494,word,00403025 // move	a2,v0
patch=0,EE,01E5E498,word,0c79790c // jal	1e5e430 <etl::pair<unsigned long const&, HookData>::pair<unsigned long const&, HookData>(unsigned long const&, HookData&&)>
patch=0,EE,01E5E49C,word,00e02025 // move	a0,a3
patch=0,EE,01E5E4A0,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5E4A4,word,00e01025 // move	v0,a3
patch=0,EE,01E5E4A8,word,03e00008 // jr	ra
patch=0,EE,01E5E4AC,word,27bd0010 // addiu	sp,sp,16

// Function: etl::pair<unsigned long const, HookData>::pair<unsigned long const, HookData>(etl::pair<unsigned long const, HookData>&&)
patch=0,EE,01E5E4B0,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5E4B4,word,00801825 // move	v1,a0
patch=0,EE,01E5E4B8,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5E4BC,word,0c7978f7 // jal	1e5e3dc <etl::remove_reference<etl::pair<unsigned long const, HookData>&>::type&& etl::move<etl::pair<unsigned long const, HookData>&>(etl::pair<unsigned long const, HookData>&)>
patch=0,EE,01E5E4C0,word,00a02025 // move	a0,a1
patch=0,EE,01E5E4C4,word,24a40004 // addiu	a0,a1,4
patch=0,EE,01E5E4C8,word,8c420000 // lw	v0,0(v0)
patch=0,EE,01E5E4CC,word,0c7978f7 // jal	1e5e3dc <etl::remove_reference<etl::pair<unsigned long const, HookData>&>::type&& etl::move<etl::pair<unsigned long const, HookData>&>(etl::pair<unsigned long const, HookData>&)>
patch=0,EE,01E5E4D0,word,ac620000 // sw	v0,0(v1)
patch=0,EE,01E5E4D4,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5E4D8,word,8c440000 // lw	a0,0(v0)
patch=0,EE,01E5E4DC,word,ac640004 // sw	a0,4(v1)
patch=0,EE,01E5E4E0,word,8c440004 // lw	a0,4(v0)
patch=0,EE,01E5E4E4,word,8c420008 // lw	v0,8(v0)
patch=0,EE,01E5E4E8,word,27bd0010 // addiu	sp,sp,16
patch=0,EE,01E5E4EC,word,ac640008 // sw	a0,8(v1)
patch=0,EE,01E5E4F0,word,03e00008 // jr	ra
patch=0,EE,01E5E4F4,word,ac62000c // sw	v0,12(v1)

// Function: rect_t* etl::addressof<rect_t>(rect_t&)
patch=0,EE,01E5E4F8,word,03e00008 // jr	ra
patch=0,EE,01E5E4FC,word,00801025 // move	v0,a0

// Function: etl::ivector<etl::pair<unsigned long const, HookData>*>::push_back(etl::pair<unsigned long const, HookData>*)
patch=0,EE,01E5E500,word,087978cd // j	1e5e334 <etl::pvoidvector::push_back(void*)>
patch=0,EE,01E5E504,word,00000000 // nop

// Function: etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::operator--()
patch=0,EE,01E5E508,word,8c830000 // lw	v1,0(a0)
patch=0,EE,01E5E50C,word,00801025 // move	v0,a0
patch=0,EE,01E5E510,word,2463fffc // addiu	v1,v1,-4
patch=0,EE,01E5E514,word,03e00008 // jr	ra
patch=0,EE,01E5E518,word,ac830000 // sw	v1,0(a0)

// Function: etl::enable_if<!etl::is_trivially_destructible<rect_t>::value, void>::type etl::destroy_at<rect_t>(rect_t*)
patch=0,EE,01E5E51C,word,03e00008 // jr	ra
patch=0,EE,01E5E520,word,00000000 // nop

// Function: etl::enable_if<!etl::is_trivially_destructible<etl::iterator_traits<rect_t*>::value_type>::value, void>::type etl::destroy<rect_t*>(rect_t*, rect_t*)
patch=0,EE,01E5E524,word,03e00008 // jr	ra
patch=0,EE,01E5E528,word,00000000 // nop

// Function: etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::iterator(etl::pair<unsigned long const, HookData>**)
patch=0,EE,01E5E52C,word,03e00008 // jr	ra
patch=0,EE,01E5E530,word,ac850000 // sw	a1,0(a0)

// Function: etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::operator++()
patch=0,EE,01E5E534,word,8c830000 // lw	v1,0(a0)
patch=0,EE,01E5E538,word,00801025 // move	v0,a0
patch=0,EE,01E5E53C,word,24630004 // addiu	v1,v1,4
patch=0,EE,01E5E540,word,03e00008 // jr	ra
patch=0,EE,01E5E544,word,ac830000 // sw	v1,0(a0)

// Function: etl::ivector<etl::pair<unsigned long const, HookData>*>::clear()
patch=0,EE,01E5E548,word,087978e4 // j	1e5e390 <etl::pvoidvector::clear()>
patch=0,EE,01E5E54C,word,00000000 // nop

// Function: etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::clear() [clone .constprop.0]
patch=0,EE,01E5E550,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E554,word,08797952 // j	1e5e548 <etl::ivector<etl::pair<unsigned long const, HookData>*>::clear()>
patch=0,EE,01E5E558,word,8c44fd60 // lw	a0,-672(v0)

// Function: void etl::advance_helper<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, int>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator&, int, etl::bidirectional_iterator_tag) [clone .constprop.0]
patch=0,EE,01E5E55C,word,14a00003 // bnez	a1,1e5e56c <void etl::advance_helper<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, int>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator&, int, etl::bidirectional_iterator_tag) [clone .constprop.0]+0x10>
patch=0,EE,01E5E560,word,00000000 // nop
patch=0,EE,01E5E564,word,03e00008 // jr	ra
patch=0,EE,01E5E568,word,00000000 // nop
patch=0,EE,01E5E56C,word,2406ffff // li	a2,-1
patch=0,EE,01E5E570,word,24a5ffff // addiu	a1,a1,-1
patch=0,EE,01E5E574,word,14a60003 // bne	a1,a2,1e5e584 <void etl::advance_helper<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, int>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator&, int, etl::bidirectional_iterator_tag) [clone .constprop.0]+0x28>
patch=0,EE,01E5E578,word,00000000 // nop
patch=0,EE,01E5E57C,word,03e00008 // jr	ra
patch=0,EE,01E5E580,word,00000000 // nop
patch=0,EE,01E5E584,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5E588,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5E58C,word,0c79794d // jal	1e5e534 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::operator++()>
patch=0,EE,01E5E590,word,24a5ffff // addiu	a1,a1,-1
patch=0,EE,01E5E594,word,14a6fffd // bne	a1,a2,1e5e58c <void etl::advance_helper<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, int>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator&, int, etl::bidirectional_iterator_tag) [clone .constprop.0]+0x30>
patch=0,EE,01E5E598,word,00000000 // nop
patch=0,EE,01E5E59C,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5E5A0,word,03e00008 // jr	ra
patch=0,EE,01E5E5A4,word,27bd0010 // addiu	sp,sp,16

// Function: void etl::advance<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, int>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator&, int)
patch=0,EE,01E5E5A8,word,08797957 // j	1e5e55c <void etl::advance_helper<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, int>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator&, int, etl::bidirectional_iterator_tag) [clone .constprop.0]>
patch=0,EE,01E5E5AC,word,00000000 // nop

// Function: etl::ivector<rect_t>::initialise() [clone .constprop.0]
patch=0,EE,01E5E5B0,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E5B4,word,24420038 // addiu	v0,v0,56
patch=0,EE,01E5E5B8,word,8c430004 // lw	v1,4(v0)
patch=0,EE,01E5E5BC,word,03e00008 // jr	ra
patch=0,EE,01E5E5C0,word,ac430008 // sw	v1,8(v0)

// Function: etl::ivector<rect_t>::clear() [clone .constprop.0]
patch=0,EE,01E5E5C4,word,0879796c // j	1e5e5b0 <etl::ivector<rect_t>::initialise() [clone .constprop.0]>
patch=0,EE,01E5E5C8,word,00000000 // nop

// Function: etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::full() const [clone .constprop.0]
patch=0,EE,01E5E5CC,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E5D0,word,087978d7 // j	1e5e35c <etl::pvoidvector::full() const>
patch=0,EE,01E5E5D4,word,8c44fd60 // lw	a0,-672(v0)

// Function: etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::~ireference_flat_map() [clone .constprop.0]
patch=0,EE,01E5E5D8,word,03e00008 // jr	ra
patch=0,EE,01E5E5DC,word,00000000 // nop

// Function: etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::~iflat_map() [clone .constprop.0]
patch=0,EE,01E5E5E0,word,03e00008 // jr	ra
patch=0,EE,01E5E5E4,word,00000000 // nop

// Function: etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::ireference_flat_map(etl::ivector<etl::pair<unsigned long const, HookData>*>&) [clone .constprop.0]
patch=0,EE,01E5E5E8,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E5EC,word,3c0301e6 // lui	v1,0x1e6
patch=0,EE,01E5E5F0,word,2442fdd8 // addiu	v0,v0,-552
patch=0,EE,01E5E5F4,word,03e00008 // jr	ra
patch=0,EE,01E5E5F8,word,ac62fd60 // sw	v0,-672(v1)

// Function: etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::iflat_map(etl::ivector<etl::pair<unsigned long const, HookData>*>&, etl::ipool&) [clone .constprop.0]
patch=0,EE,01E5E5FC,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5E600,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5E604,word,0c79797a // jal	1e5e5e8 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::ireference_flat_map(etl::ivector<etl::pair<unsigned long const, HookData>*>&) [clone .constprop.0]>
patch=0,EE,01E5E608,word,00000000 // nop
patch=0,EE,01E5E60C,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E610,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5E614,word,3c0301e6 // lui	v1,0x1e6
patch=0,EE,01E5E618,word,2442fd70 // addiu	v0,v0,-656
patch=0,EE,01E5E61C,word,ac62fd68 // sw	v0,-664(v1)
patch=0,EE,01E5E620,word,03e00008 // jr	ra
patch=0,EE,01E5E624,word,27bd0010 // addiu	sp,sp,16

// Function: etl::ivector<rect_t>::ivector(rect_t*, unsigned int) [clone .constprop.0]
patch=0,EE,01E5E628,word,3c0401e6 // lui	a0,0x1e6
patch=0,EE,01E5E62C,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5E630,word,24840038 // addiu	a0,a0,56
patch=0,EE,01E5E634,word,24050064 // li	a1,100
patch=0,EE,01E5E638,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E63C,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5E640,word,0c7978c9 // jal	1e5e324 <etl::vector_base::vector_base(unsigned int)>
patch=0,EE,01E5E644,word,24420044 // addiu	v0,v0,68
patch=0,EE,01E5E648,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5E64C,word,ac820004 // sw	v0,4(a0)
patch=0,EE,01E5E650,word,ac820008 // sw	v0,8(a0)
patch=0,EE,01E5E654,word,03e00008 // jr	ra
patch=0,EE,01E5E658,word,27bd0010 // addiu	sp,sp,16

// Function: etl::vector<rect_t, 100u>::vector() [clone .constprop.0]
patch=0,EE,01E5E65C,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5E660,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5E664,word,0c79798a // jal	1e5e628 <etl::ivector<rect_t>::ivector(rect_t*, unsigned int) [clone .constprop.0]>
patch=0,EE,01E5E668,word,00000000 // nop
patch=0,EE,01E5E66C,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5E670,word,0879796c // j	1e5e5b0 <etl::ivector<rect_t>::initialise() [clone .constprop.0]>
patch=0,EE,01E5E674,word,27bd0010 // addiu	sp,sp,16

// Function: etl::ivector<rect_t>::size() const [clone .constprop.0]
patch=0,EE,01E5E678,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E67C,word,24420038 // addiu	v0,v0,56
patch=0,EE,01E5E680,word,8c430008 // lw	v1,8(v0)
patch=0,EE,01E5E684,word,8c420004 // lw	v0,4(v0)
patch=0,EE,01E5E688,word,00621823 // subu	v1,v1,v0
patch=0,EE,01E5E68C,word,3c02aaaa // lui	v0,0xaaaa
patch=0,EE,01E5E690,word,00031903 // sra	v1,v1,0x4
patch=0,EE,01E5E694,word,3442aaab // ori	v0,v0,0xaaab
patch=0,EE,01E5E698,word,03e00008 // jr	ra
patch=0,EE,01E5E69C,word,00621018 // mult	v0,v1,v0

// Function: etl::ivector<rect_t>::end() [clone .constprop.0]
patch=0,EE,01E5E6A0,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E6A4,word,03e00008 // jr	ra
patch=0,EE,01E5E6A8,word,8c420040 // lw	v0,64(v0)

// Function: etl::ivector<rect_t>::begin() [clone .constprop.0]
patch=0,EE,01E5E6AC,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E6B0,word,03e00008 // jr	ra
patch=0,EE,01E5E6B4,word,8c42003c // lw	v0,60(v0)

// Function: etl::ivector<rect_t>::~ivector() [clone .constprop.0]
patch=0,EE,01E5E6B8,word,03e00008 // jr	ra
patch=0,EE,01E5E6BC,word,00000000 // nop

// Function: etl::vector<rect_t, 100u>::~vector() [clone .constprop.0]
patch=0,EE,01E5E6C0,word,08797971 // j	1e5e5c4 <etl::ivector<rect_t>::clear() [clone .constprop.0]>
patch=0,EE,01E5E6C4,word,00000000 // nop

// Function: etl::pvoidvector::~pvoidvector() [clone .constprop.0]
patch=0,EE,01E5E6C8,word,03e00008 // jr	ra
patch=0,EE,01E5E6CC,word,00000000 // nop

// Function: etl::ivector<etl::pair<unsigned long const, HookData>*>::~ivector() [clone .constprop.0]
patch=0,EE,01E5E6D0,word,03e00008 // jr	ra
patch=0,EE,01E5E6D4,word,00000000 // nop

// Function: etl::vector<etl::pair<unsigned long const, HookData>*, 5u>::~vector() [clone .constprop.0]
patch=0,EE,01E5E6D8,word,03e00008 // jr	ra
patch=0,EE,01E5E6DC,word,00000000 // nop

// Function: etl::ipool::~ipool() [clone .constprop.0]
patch=0,EE,01E5E6E0,word,03e00008 // jr	ra
patch=0,EE,01E5E6E4,word,00000000 // nop

// Function: etl::generic_pool<16u, 4u, 5u>::~generic_pool() [clone .constprop.0]
patch=0,EE,01E5E6E8,word,03e00008 // jr	ra
patch=0,EE,01E5E6EC,word,00000000 // nop

// Function: etl::pool<etl::pair<unsigned long const, HookData>, 5u>::~pool() [clone .constprop.0]
patch=0,EE,01E5E6F0,word,03e00008 // jr	ra
patch=0,EE,01E5E6F4,word,00000000 // nop

// Function: etl::ipool::ipool(char*, unsigned long, unsigned long) [clone .constprop.0]
patch=0,EE,01E5E6F8,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E6FC,word,3c0301e6 // lui	v1,0x1e6
patch=0,EE,01E5E700,word,2442fd60 // addiu	v0,v0,-672
patch=0,EE,01E5E704,word,2463fd88 // addiu	v1,v1,-632
patch=0,EE,01E5E708,word,ac430010 // sw	v1,16(v0)
patch=0,EE,01E5E70C,word,ac430014 // sw	v1,20(v0)
patch=0,EE,01E5E710,word,3c035000 // lui	v1,0x5000
patch=0,EE,01E5E714,word,64630001 // daddiu	v1,v1,1
patch=0,EE,01E5E718,word,fc400018 // sd	zero,24(v0)
patch=0,EE,01E5E71C,word,00031938 // dsll	v1,v1,0x4
patch=0,EE,01E5E720,word,03e00008 // jr	ra
patch=0,EE,01E5E724,word,fc430020 // sd	v1,32(v0)

// Function: etl::generic_pool<16u, 4u, 5u>::generic_pool() [clone .constprop.0]
patch=0,EE,01E5E728,word,087979be // j	1e5e6f8 <etl::ipool::ipool(char*, unsigned long, unsigned long) [clone .constprop.0]>
patch=0,EE,01E5E72C,word,00000000 // nop

// Function: etl::pool<etl::pair<unsigned long const, HookData>, 5u>::pool() [clone .constprop.0]
patch=0,EE,01E5E730,word,087979ca // j	1e5e728 <etl::generic_pool<16u, 4u, 5u>::generic_pool() [clone .constprop.0]>
patch=0,EE,01E5E734,word,00000000 // nop

// Function: etl::pool_exception::pool_exception(char const*, char const*, int) [clone .constprop.0]
patch=0,EE,01E5E738,word,00c03825 // move	a3,a2
patch=0,EE,01E5E73C,word,3c0601e6 // lui	a2,0x1e6
patch=0,EE,01E5E740,word,08797804 // j	1e5e010 <etl::exception::exception(char const*, char const*, int)>
patch=0,EE,01E5E744,word,24c6fdf8 // addiu	a2,a2,-520

// Function: etl::pool_element_size::pool_element_size(char const*, int) [clone .constprop.0]
patch=0,EE,01E5E748,word,3c0501e6 // lui	a1,0x1e6
patch=0,EE,01E5E74C,word,24060075 // li	a2,117
patch=0,EE,01E5E750,word,087979ce // j	1e5e738 <etl::pool_exception::pool_exception(char const*, char const*, int) [clone .constprop.0]>
patch=0,EE,01E5E754,word,24a5fe18 // addiu	a1,a1,-488

// Function: etl::pool_object_not_in_pool::pool_object_not_in_pool(char const*, int) [clone .constprop.0]
patch=0,EE,01E5E758,word,3c0501e6 // lui	a1,0x1e6
patch=0,EE,01E5E75C,word,2406017d // li	a2,381
patch=0,EE,01E5E760,word,087979ce // j	1e5e738 <etl::pool_exception::pool_exception(char const*, char const*, int) [clone .constprop.0]>
patch=0,EE,01E5E764,word,24a5fe30 // addiu	a1,a1,-464

// Function: etl::pool_no_allocation::pool_no_allocation(char const*, int) [clone .constprop.0]
patch=0,EE,01E5E768,word,3c0501e6 // lui	a1,0x1e6
patch=0,EE,01E5E76C,word,24060171 // li	a2,369
patch=0,EE,01E5E770,word,087979ce // j	1e5e738 <etl::pool_exception::pool_exception(char const*, char const*, int) [clone .constprop.0]>
patch=0,EE,01E5E774,word,24a5fe48 // addiu	a1,a1,-440

// Function: etl::flat_map_exception::flat_map_exception(char const*, char const*, int) [clone .constprop.0]
patch=0,EE,01E5E778,word,00c03825 // move	a3,a2
patch=0,EE,01E5E77C,word,00a03025 // move	a2,a1
patch=0,EE,01E5E780,word,3c0501e6 // lui	a1,0x1e6
patch=0,EE,01E5E784,word,08797804 // j	1e5e010 <etl::exception::exception(char const*, char const*, int)>
patch=0,EE,01E5E788,word,24a5fe58 // addiu	a1,a1,-424

// Function: etl::flat_map_full::flat_map_full(char const*, int)
patch=0,EE,01E5E78C,word,087979de // j	1e5e778 <etl::flat_map_exception::flat_map_exception(char const*, char const*, int) [clone .constprop.0]>
patch=0,EE,01E5E790,word,00000000 // nop

// Function: etl::pvoidvector::to_iterator(void* const*) const [clone .constprop.0]
patch=0,EE,01E5E794,word,03e00008 // jr	ra
patch=0,EE,01E5E798,word,00801025 // move	v0,a0

// Function: etl::pvoidvector::pvoidvector(void**, unsigned int) [clone .constprop.0]
patch=0,EE,01E5E79C,word,3c0401e6 // lui	a0,0x1e6
patch=0,EE,01E5E7A0,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5E7A4,word,24050005 // li	a1,5
patch=0,EE,01E5E7A8,word,2484fdd8 // addiu	a0,a0,-552
patch=0,EE,01E5E7AC,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E7B0,word,3c0301e6 // lui	v1,0x1e6
patch=0,EE,01E5E7B4,word,2442fd60 // addiu	v0,v0,-672
patch=0,EE,01E5E7B8,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5E7BC,word,0c7978c9 // jal	1e5e324 <etl::vector_base::vector_base(unsigned int)>
patch=0,EE,01E5E7C0,word,2463fde4 // addiu	v1,v1,-540
patch=0,EE,01E5E7C4,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5E7C8,word,27bd0010 // addiu	sp,sp,16
patch=0,EE,01E5E7CC,word,ac43007c // sw	v1,124(v0)
patch=0,EE,01E5E7D0,word,03e00008 // jr	ra
patch=0,EE,01E5E7D4,word,ac430080 // sw	v1,128(v0)

// Function: etl::ivector<etl::pair<unsigned long const, HookData>*>::ivector(etl::pair<unsigned long const, HookData>**, unsigned int) [clone .constprop.0]
patch=0,EE,01E5E7D8,word,087979e7 // j	1e5e79c <etl::pvoidvector::pvoidvector(void**, unsigned int) [clone .constprop.0]>
patch=0,EE,01E5E7DC,word,00000000 // nop

// Function: etl::vector<etl::pair<unsigned long const, HookData>*, 5u>::vector() [clone .constprop.0]
patch=0,EE,01E5E7E0,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5E7E4,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5E7E8,word,0c7979f6 // jal	1e5e7d8 <etl::ivector<etl::pair<unsigned long const, HookData>*>::ivector(etl::pair<unsigned long const, HookData>**, unsigned int) [clone .constprop.0]>
patch=0,EE,01E5E7EC,word,00000000 // nop
patch=0,EE,01E5E7F0,word,3c0401e6 // lui	a0,0x1e6
patch=0,EE,01E5E7F4,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5E7F8,word,2484fdd8 // addiu	a0,a0,-552
patch=0,EE,01E5E7FC,word,087978e1 // j	1e5e384 <etl::pvoidvector::initialise()>
patch=0,EE,01E5E800,word,27bd0010 // addiu	sp,sp,16

// Function: etl::flat_map<unsigned long, HookData, 5u, etl::less<unsigned long> >::flat_map() [clone .constprop.0]
patch=0,EE,01E5E804,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5E808,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5E80C,word,0c79797f // jal	1e5e5fc <etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::iflat_map(etl::ivector<etl::pair<unsigned long const, HookData>*>&, etl::ipool&) [clone .constprop.0]>
patch=0,EE,01E5E810,word,00000000 // nop
patch=0,EE,01E5E814,word,0c7979cc // jal	1e5e730 <etl::pool<etl::pair<unsigned long const, HookData>, 5u>::pool() [clone .constprop.0]>
patch=0,EE,01E5E818,word,00000000 // nop
patch=0,EE,01E5E81C,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5E820,word,087979f8 // j	1e5e7e0 <etl::vector<etl::pair<unsigned long const, HookData>*, 5u>::vector() [clone .constprop.0]>
patch=0,EE,01E5E824,word,27bd0010 // addiu	sp,sp,16

// Function: etl::vector_base::capacity() const [clone .constprop.0]
patch=0,EE,01E5E828,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E82C,word,03e00008 // jr	ra
patch=0,EE,01E5E830,word,8c420038 // lw	v0,56(v0)

// Function: etl::vector_exception::vector_exception(char const*, char const*, int) [clone .constprop.0]
patch=0,EE,01E5E834,word,3c0601e6 // lui	a2,0x1e6
patch=0,EE,01E5E838,word,3c0501e6 // lui	a1,0x1e6
patch=0,EE,01E5E83C,word,240701c0 // li	a3,448
patch=0,EE,01E5E840,word,24c6fe68 // addiu	a2,a2,-408
patch=0,EE,01E5E844,word,08797804 // j	1e5e010 <etl::exception::exception(char const*, char const*, int)>
patch=0,EE,01E5E848,word,24a5fe98 // addiu	a1,a1,-360

// Function: etl::vector_full::vector_full(char const*, int) [clone .constprop.0]
patch=0,EE,01E5E84C,word,08797a0d // j	1e5e834 <etl::vector_exception::vector_exception(char const*, char const*, int) [clone .constprop.0]>
patch=0,EE,01E5E850,word,00000000 // nop

// Function: operator new(unsigned int, void*) [clone .constprop.0]
patch=0,EE,01E5E854,word,03e00008 // jr	ra
patch=0,EE,01E5E858,word,00801025 // move	v0,a0

// Function: etl::error_handler::invocation_element::invocation_element() [clone .constprop.0]
patch=0,EE,01E5E85C,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E860,word,ac400028 // sw	zero,40(v0)
patch=0,EE,01E5E864,word,24420028 // addiu	v0,v0,40
patch=0,EE,01E5E868,word,03e00008 // jr	ra
patch=0,EE,01E5E86C,word,ac400004 // sw	zero,4(v0)

// Function: etl::error_handler::get_invocation_element()
patch=0,EE,01E5E870,word,3c0301e6 // lui	v1,0x1e6
patch=0,EE,01E5E874,word,80620030 // lb	v0,48(v1)
patch=0,EE,01E5E878,word,1440000c // bnez	v0,1e5e8ac <etl::error_handler::get_invocation_element()+0x3c>
patch=0,EE,01E5E87C,word,00000000 // nop
patch=0,EE,01E5E880,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5E884,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5E888,word,0c797a17 // jal	1e5e85c <etl::error_handler::invocation_element::invocation_element() [clone .constprop.0]>
patch=0,EE,01E5E88C,word,00000000 // nop
patch=0,EE,01E5E890,word,24020001 // li	v0,1
patch=0,EE,01E5E894,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5E898,word,a0620030 // sb	v0,48(v1)
patch=0,EE,01E5E89C,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E8A0,word,24420028 // addiu	v0,v0,40
patch=0,EE,01E5E8A4,word,03e00008 // jr	ra
patch=0,EE,01E5E8A8,word,27bd0010 // addiu	sp,sp,16
patch=0,EE,01E5E8AC,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5E8B0,word,03e00008 // jr	ra
patch=0,EE,01E5E8B4,word,24420028 // addiu	v0,v0,40

// Function: etl::error_handler::error(etl::exception const&)
patch=0,EE,01E5E8B8,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5E8BC,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5E8C0,word,0c797a1c // jal	1e5e870 <etl::error_handler::get_invocation_element()>
patch=0,EE,01E5E8C4,word,00000000 // nop
patch=0,EE,01E5E8C8,word,8c590004 // lw	t9,4(v0)
patch=0,EE,01E5E8CC,word,13200006 // beqz	t9,1e5e8e8 <etl::error_handler::error(etl::exception const&)+0x30>
patch=0,EE,01E5E8D0,word,00000000 // nop
patch=0,EE,01E5E8D4,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5E8D8,word,00802825 // move	a1,a0
patch=0,EE,01E5E8DC,word,8c440000 // lw	a0,0(v0)
patch=0,EE,01E5E8E0,word,03200008 // jr	t9
patch=0,EE,01E5E8E4,word,27bd0010 // addiu	sp,sp,16
patch=0,EE,01E5E8E8,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5E8EC,word,03e00008 // jr	ra
patch=0,EE,01E5E8F0,word,27bd0010 // addiu	sp,sp,16

// Function: etl::ipool::allocate_item()
patch=0,EE,01E5E8F4,word,8c850008 // lw	a1,8(a0)
patch=0,EE,01E5E8F8,word,8c830014 // lw	v1,20(a0)
patch=0,EE,01E5E8FC,word,00a3102b // sltu	v0,a1,v1
patch=0,EE,01E5E900,word,10400017 // beqz	v0,1e5e960 <etl::ipool::allocate_item()+0x6c>
patch=0,EE,01E5E904,word,00000000 // nop
patch=0,EE,01E5E908,word,8c82000c // lw	v0,12(a0)
patch=0,EE,01E5E90C,word,0043302b // sltu	a2,v0,v1
patch=0,EE,01E5E910,word,10c00009 // beqz	a2,1e5e938 <etl::ipool::allocate_item()+0x44>
patch=0,EE,01E5E914,word,00000000 // nop
patch=0,EE,01E5E918,word,8c870010 // lw	a3,16(a0)
patch=0,EE,01E5E91C,word,00474018 // mult	a4,v0,a3
patch=0,EE,01E5E920,word,8c860000 // lw	a2,0(a0)
patch=0,EE,01E5E924,word,24420001 // addiu	v0,v0,1
patch=0,EE,01E5E928,word,01063021 // addu	a2,a4,a2
patch=0,EE,01E5E92C,word,00c73821 // addu	a3,a2,a3
patch=0,EE,01E5E930,word,acc70000 // sw	a3,0(a2)
patch=0,EE,01E5E934,word,ac82000c // sw	v0,12(a0)
patch=0,EE,01E5E938,word,24a50001 // addiu	a1,a1,1
patch=0,EE,01E5E93C,word,8c820004 // lw	v0,4(a0)
patch=0,EE,01E5E940,word,00a3182b // sltu	v1,a1,v1
patch=0,EE,01E5E944,word,10600004 // beqz	v1,1e5e958 <etl::ipool::allocate_item()+0x64>
patch=0,EE,01E5E948,word,ac850008 // sw	a1,8(a0)
patch=0,EE,01E5E94C,word,8c430000 // lw	v1,0(v0)
patch=0,EE,01E5E950,word,03e00008 // jr	ra
patch=0,EE,01E5E954,word,ac830004 // sw	v1,4(a0)
patch=0,EE,01E5E958,word,03e00008 // jr	ra
patch=0,EE,01E5E95C,word,ac800004 // sw	zero,4(a0)
patch=0,EE,01E5E960,word,27bdffe0 // addiu	sp,sp,-32
patch=0,EE,01E5E964,word,ffbf0018 // sd	ra,24(sp)
patch=0,EE,01E5E968,word,0c7979da // jal	1e5e768 <etl::pool_no_allocation::pool_no_allocation(char const*, int) [clone .constprop.0]>
patch=0,EE,01E5E96C,word,03a02025 // move	a0,sp
patch=0,EE,01E5E970,word,0c797a2e // jal	1e5e8b8 <etl::error_handler::error(etl::exception const&)>
patch=0,EE,01E5E974,word,00000000 // nop
patch=0,EE,01E5E978,word,dfbf0018 // ld	ra,24(sp)
patch=0,EE,01E5E97C,word,00001025 // move	v0,zero
patch=0,EE,01E5E980,word,03e00008 // jr	ra
patch=0,EE,01E5E984,word,27bd0020 // addiu	sp,sp,32

// Function: etl::ipool::release_item(char*)
patch=0,EE,01E5E988,word,27bdffd0 // addiu	sp,sp,-48
patch=0,EE,01E5E98C,word,ffb10020 // sd	s1,32(sp)
patch=0,EE,01E5E990,word,00a08825 // move	s1,a1
patch=0,EE,01E5E994,word,ffb00018 // sd	s0,24(sp)
patch=0,EE,01E5E998,word,ffbf0028 // sd	ra,40(sp)
patch=0,EE,01E5E99C,word,0c7978e6 // jal	1e5e398 <etl::ipool::is_item_in_pool(char const*) const>
patch=0,EE,01E5E9A0,word,00808025 // move	s0,a0
patch=0,EE,01E5E9A4,word,14400005 // bnez	v0,1e5e9bc <etl::ipool::release_item(char*)+0x34>
patch=0,EE,01E5E9A8,word,00000000 // nop
patch=0,EE,01E5E9AC,word,0c7979d6 // jal	1e5e758 <etl::pool_object_not_in_pool::pool_object_not_in_pool(char const*, int) [clone .constprop.0]>
patch=0,EE,01E5E9B0,word,03a02025 // move	a0,sp
patch=0,EE,01E5E9B4,word,0c797a2e // jal	1e5e8b8 <etl::error_handler::error(etl::exception const&)>
patch=0,EE,01E5E9B8,word,00000000 // nop
patch=0,EE,01E5E9BC,word,8e020004 // lw	v0,4(s0)
patch=0,EE,01E5E9C0,word,ae220000 // sw	v0,0(s1)
patch=0,EE,01E5E9C4,word,8e020008 // lw	v0,8(s0)
patch=0,EE,01E5E9C8,word,dfbf0028 // ld	ra,40(sp)
patch=0,EE,01E5E9CC,word,2442ffff // addiu	v0,v0,-1
patch=0,EE,01E5E9D0,word,ae110004 // sw	s1,4(s0)
patch=0,EE,01E5E9D4,word,ae020008 // sw	v0,8(s0)
patch=0,EE,01E5E9D8,word,dfb10020 // ld	s1,32(sp)
patch=0,EE,01E5E9DC,word,dfb00018 // ld	s0,24(sp)
patch=0,EE,01E5E9E0,word,03e00008 // jr	ra
patch=0,EE,01E5E9E4,word,27bd0030 // addiu	sp,sp,48

// Function: etl::ipool::release(void const*)
patch=0,EE,01E5E9E8,word,08797a62 // j	1e5e988 <etl::ipool::release_item(char*)>
patch=0,EE,01E5E9EC,word,00000000 // nop

// Function: etl::pair<unsigned long const, HookData>* etl::ipool::allocate<etl::pair<unsigned long const, HookData> >()
patch=0,EE,01E5E9F0,word,8c820010 // lw	v0,16(a0)
patch=0,EE,01E5E9F4,word,27bdffe0 // addiu	sp,sp,-32
patch=0,EE,01E5E9F8,word,2c420010 // sltiu	v0,v0,16
patch=0,EE,01E5E9FC,word,ffb00010 // sd	s0,16(sp)
patch=0,EE,01E5EA00,word,ffbf0018 // sd	ra,24(sp)
patch=0,EE,01E5EA04,word,10400005 // beqz	v0,1e5ea1c <etl::pair<unsigned long const, HookData>* etl::ipool::allocate<etl::pair<unsigned long const, HookData> >()+0x2c>
patch=0,EE,01E5EA08,word,00808025 // move	s0,a0
patch=0,EE,01E5EA0C,word,0c7979d2 // jal	1e5e748 <etl::pool_element_size::pool_element_size(char const*, int) [clone .constprop.0]>
patch=0,EE,01E5EA10,word,03a02025 // move	a0,sp
patch=0,EE,01E5EA14,word,0c797a2e // jal	1e5e8b8 <etl::error_handler::error(etl::exception const&)>
patch=0,EE,01E5EA18,word,00000000 // nop
patch=0,EE,01E5EA1C,word,dfbf0018 // ld	ra,24(sp)
patch=0,EE,01E5EA20,word,02002025 // move	a0,s0
patch=0,EE,01E5EA24,word,dfb00010 // ld	s0,16(sp)
patch=0,EE,01E5EA28,word,08797a3d // j	1e5e8f4 <etl::ipool::allocate_item()>
patch=0,EE,01E5EA2C,word,27bd0020 // addiu	sp,sp,32

// Function: etl::error_handler::create(void*, void (*)(void*, etl::exception const&)) [clone .constprop.0]
patch=0,EE,01E5EA30,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5EA34,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5EA38,word,0c797a1c // jal	1e5e870 <etl::error_handler::get_invocation_element()>
patch=0,EE,01E5EA3C,word,00000000 // nop
patch=0,EE,01E5EA40,word,3c0301e6 // lui	v1,0x1e6
patch=0,EE,01E5EA44,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5EA48,word,2463f568 // addiu	v1,v1,-2712
patch=0,EE,01E5EA4C,word,ac400000 // sw	zero,0(v0)
patch=0,EE,01E5EA50,word,ac430004 // sw	v1,4(v0)
patch=0,EE,01E5EA54,word,03e00008 // jr	ra
patch=0,EE,01E5EA58,word,27bd0010 // addiu	sp,sp,16

// Function: void etl::error_handler::set_callback<&(etl_error_handler(etl::exception const&))>()
patch=0,EE,01E5EA5C,word,08797a8c // j	1e5ea30 <etl::error_handler::create(void*, void (*)(void*, etl::exception const&)) [clone .constprop.0]>
patch=0,EE,01E5EA60,word,00000000 // nop

// Function: ta_init(void const*, void const*, unsigned int, unsigned int, unsigned int) [clone .constprop.0] [clone .isra.0]
patch=0,EE,01E5EA64,word,3c0301e4 // lui	v1,0x1e4
patch=0,EE,01E5EA68,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5EA6C,word,3463e000 // ori	v1,v1,0xe000
patch=0,EE,01E5EA70,word,3c0401e5 // lui	a0,0x1e5
patch=0,EE,01E5EA74,word,ac430020 // sw	v1,32(v0)
patch=0,EE,01E5EA78,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5EA7C,word,ac440018 // sw	a0,24(v0)
patch=0,EE,01E5EA80,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5EA84,word,24040010 // li	a0,16
patch=0,EE,01E5EA88,word,ac440014 // sw	a0,20(v0)
patch=0,EE,01E5EA8C,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5EA90,word,24040004 // li	a0,4
patch=0,EE,01E5EA94,word,ac44001c // sw	a0,28(v0)
patch=0,EE,01E5EA98,word,2402793b // li	v0,31035
patch=0,EE,01E5EA9C,word,00021578 // dsll	v0,v0,0x15
patch=0,EE,01E5EAA0,word,fc600000 // sd	zero,0(v1)
patch=0,EE,01E5EAA4,word,3442800f // ori	v0,v0,0x800f
patch=0,EE,01E5EAA8,word,00021478 // dsll	v0,v0,0x11
patch=0,EE,01E5EAAC,word,64424e01 // daddiu	v0,v0,19969
patch=0,EE,01E5EAB0,word,00021138 // dsll	v0,v0,0x4
patch=0,EE,01E5EAB4,word,fc620008 // sd	v0,8(v1)
patch=0,EE,01E5EAB8,word,24620010 // addiu	v0,v1,16
patch=0,EE,01E5EABC,word,24630c04 // addiu	v1,v1,3076
patch=0,EE,01E5EAC0,word,00402025 // move	a0,v0
patch=0,EE,01E5EAC4,word,2442000c // addiu	v0,v0,12
patch=0,EE,01E5EAC8,word,ac820004 // sw	v0,4(a0)
patch=0,EE,01E5EACC,word,1443fffc // bne	v0,v1,1e5eac0 <ta_init(void const*, void const*, unsigned int, unsigned int, unsigned int) [clone .constprop.0] [clone .isra.0]+0x5c>
patch=0,EE,01E5EAD0,word,00000000 // nop
patch=0,EE,01E5EAD4,word,03e00008 // jr	ra
patch=0,EE,01E5EAD8,word,ac400004 // sw	zero,4(v0)

// Function: etl::less<unsigned long>::operator()(unsigned long const&, unsigned long const&) const [clone .constprop.0] [clone .isra.0]
patch=0,EE,01E5EADC,word,03e00008 // jr	ra
patch=0,EE,01E5EAE0,word,0085102b // sltu	v0,a0,a1

// Function: etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::keys_are_equal(unsigned long const&, unsigned long const&) const [clone .constprop.0] [clone .isra.0]
patch=0,EE,01E5EAE4,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5EAE8,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5EAEC,word,0c797ab7 // jal	1e5eadc <etl::less<unsigned long>::operator()(unsigned long const&, unsigned long const&) const [clone .constprop.0] [clone .isra.0]>
patch=0,EE,01E5EAF0,word,00001825 // move	v1,zero
patch=0,EE,01E5EAF4,word,14400007 // bnez	v0,1e5eb14 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::keys_are_equal(unsigned long const&, unsigned long const&) const [clone .constprop.0] [clone .isra.0]+0x30>
patch=0,EE,01E5EAF8,word,00000000 // nop
patch=0,EE,01E5EAFC,word,00a03025 // move	a2,a1
patch=0,EE,01E5EB00,word,00802825 // move	a1,a0
patch=0,EE,01E5EB04,word,0c797ab7 // jal	1e5eadc <etl::less<unsigned long>::operator()(unsigned long const&, unsigned long const&) const [clone .constprop.0] [clone .isra.0]>
patch=0,EE,01E5EB08,word,00c02025 // move	a0,a2
patch=0,EE,01E5EB0C,word,38420001 // xori	v0,v0,0x1
patch=0,EE,01E5EB10,word,304300ff // andi	v1,v0,0xff
patch=0,EE,01E5EB14,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5EB18,word,00601025 // move	v0,v1
patch=0,EE,01E5EB1C,word,03e00008 // jr	ra
patch=0,EE,01E5EB20,word,27bd0010 // addiu	sp,sp,16

// Function: etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::Compare::operator()(etl::pair<unsigned long const, HookData> const&, unsigned long const&) const [clone .isra.0]
patch=0,EE,01E5EB24,word,08797ab7 // j	1e5eadc <etl::less<unsigned long>::operator()(unsigned long const&, unsigned long const&) const [clone .constprop.0] [clone .isra.0]>
patch=0,EE,01E5EB28,word,8c840000 // lw	a0,0(a0)

// Function: etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::operator*() const [clone .isra.0]
patch=0,EE,01E5EB2C,word,03e00008 // jr	ra
patch=0,EE,01E5EB30,word,8c820000 // lw	v0,0(a0)

// Function: etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::operator=(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]
patch=0,EE,01E5EB34,word,03e00008 // jr	ra
patch=0,EE,01E5EB38,word,ac850000 // sw	a1,0(a0)

// Function: etl::pair<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, bool>::operator=(etl::pair<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, bool>&&) [clone .isra.0]
patch=0,EE,01E5EB3C,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5EB40,word,00801825 // move	v1,a0
patch=0,EE,01E5EB44,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5EB48,word,0c7978f7 // jal	1e5e3dc <etl::remove_reference<etl::pair<unsigned long const, HookData>&>::type&& etl::move<etl::pair<unsigned long const, HookData>&>(etl::pair<unsigned long const, HookData>&)>
patch=0,EE,01E5EB4C,word,00a02025 // move	a0,a1
patch=0,EE,01E5EB50,word,00a03025 // move	a2,a1
patch=0,EE,01E5EB54,word,00602025 // move	a0,v1
patch=0,EE,01E5EB58,word,0c797acd // jal	1e5eb34 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::operator=(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]>
patch=0,EE,01E5EB5C,word,8c450000 // lw	a1,0(v0)
patch=0,EE,01E5EB60,word,0c7978f7 // jal	1e5e3dc <etl::remove_reference<etl::pair<unsigned long const, HookData>&>::type&& etl::move<etl::pair<unsigned long const, HookData>&>(etl::pair<unsigned long const, HookData>&)>
patch=0,EE,01E5EB64,word,24c40004 // addiu	a0,a2,4
patch=0,EE,01E5EB68,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5EB6C,word,90420000 // lbu	v0,0(v0)
patch=0,EE,01E5EB70,word,27bd0010 // addiu	sp,sp,16
patch=0,EE,01E5EB74,word,03e00008 // jr	ra
patch=0,EE,01E5EB78,word,a0620004 // sb	v0,4(v1)

// Function: etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::operator->() const [clone .isra.0]
patch=0,EE,01E5EB7C,word,0879793e // j	1e5e4f8 <rect_t* etl::addressof<rect_t>(rect_t&)>
patch=0,EE,01E5EB80,word,8c840000 // lw	a0,0(a0)

// Function: etl::operator==(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]
patch=0,EE,01E5EB84,word,00a41026 // xor	v0,a1,a0
patch=0,EE,01E5EB88,word,03e00008 // jr	ra
patch=0,EE,01E5EB8C,word,2c420001 // sltiu	v0,v0,1

// Function: etl::operator!=(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]
patch=0,EE,01E5EB90,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5EB94,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5EB98,word,0c797ae1 // jal	1e5eb84 <etl::operator==(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]>
patch=0,EE,01E5EB9C,word,00000000 // nop
patch=0,EE,01E5EBA0,word,38420001 // xori	v0,v0,0x1
patch=0,EE,01E5EBA4,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5EBA8,word,304200ff // andi	v0,v0,0xff
patch=0,EE,01E5EBAC,word,03e00008 // jr	ra
patch=0,EE,01E5EBB0,word,27bd0010 // addiu	sp,sp,16

// Function: etl::iterator_traits<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator>::difference_type etl::distance_helper<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::bidirectional_iterator_tag) [clone .constprop.0]
patch=0,EE,01E5EBB4,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5EBB8,word,00803025 // move	a2,a0
patch=0,EE,01E5EBBC,word,00a04025 // move	a4,a1
patch=0,EE,01E5EBC0,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5EBC4,word,00003825 // move	a3,zero
patch=0,EE,01E5EBC8,word,8d050000 // lw	a1,0(a4)
patch=0,EE,01E5EBCC,word,0c797ae4 // jal	1e5eb90 <etl::operator!=(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]>
patch=0,EE,01E5EBD0,word,8cc40000 // lw	a0,0(a2)
patch=0,EE,01E5EBD4,word,14400005 // bnez	v0,1e5ebec <etl::iterator_traits<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator>::difference_type etl::distance_helper<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::bidirectional_iterator_tag) [clone .constprop.0]+0x38>
patch=0,EE,01E5EBD8,word,00000000 // nop
patch=0,EE,01E5EBDC,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5EBE0,word,00e01025 // move	v0,a3
patch=0,EE,01E5EBE4,word,03e00008 // jr	ra
patch=0,EE,01E5EBE8,word,27bd0010 // addiu	sp,sp,16
patch=0,EE,01E5EBEC,word,00c02025 // move	a0,a2
patch=0,EE,01E5EBF0,word,0c79794d // jal	1e5e534 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::operator++()>
patch=0,EE,01E5EBF4,word,24e70001 // addiu	a3,a3,1
patch=0,EE,01E5EBF8,word,1000fff3 // b	1e5ebc8 <etl::iterator_traits<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator>::difference_type etl::distance_helper<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::bidirectional_iterator_tag) [clone .constprop.0]+0x14>
patch=0,EE,01E5EBFC,word,00000000 // nop

// Function: etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::iterator(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]
patch=0,EE,01E5EC00,word,03e00008 // jr	ra
patch=0,EE,01E5EC04,word,ac850000 // sw	a1,0(a0)

// Function: etl::pair<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, bool>::pair<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator&, bool>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator&, bool&&) [clone .constprop.0]
patch=0,EE,01E5EC08,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5EC0C,word,00801825 // move	v1,a0
patch=0,EE,01E5EC10,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5EC14,word,0c7978f7 // jal	1e5e3dc <etl::remove_reference<etl::pair<unsigned long const, HookData>&>::type&& etl::move<etl::pair<unsigned long const, HookData>&>(etl::pair<unsigned long const, HookData>&)>
patch=0,EE,01E5EC18,word,00a02025 // move	a0,a1
patch=0,EE,01E5EC1C,word,00602025 // move	a0,v1
patch=0,EE,01E5EC20,word,0c797b00 // jal	1e5ec00 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::iterator(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]>
patch=0,EE,01E5EC24,word,8c450000 // lw	a1,0(v0)
patch=0,EE,01E5EC28,word,0c7978f7 // jal	1e5e3dc <etl::remove_reference<etl::pair<unsigned long const, HookData>&>::type&& etl::move<etl::pair<unsigned long const, HookData>&>(etl::pair<unsigned long const, HookData>&)>
patch=0,EE,01E5EC2C,word,00c02025 // move	a0,a2
patch=0,EE,01E5EC30,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5EC34,word,90420000 // lbu	v0,0(v0)
patch=0,EE,01E5EC38,word,27bd0010 // addiu	sp,sp,16
patch=0,EE,01E5EC3C,word,03e00008 // jr	ra
patch=0,EE,01E5EC40,word,a0620004 // sb	v0,4(v1)

// Function: etl::iterator_traits<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator>::difference_type etl::distance<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator) [clone .isra.0]
patch=0,EE,01E5EC44,word,27bdffe0 // addiu	sp,sp,-32
patch=0,EE,01E5EC48,word,00a01025 // move	v0,a1
patch=0,EE,01E5EC4C,word,00802825 // move	a1,a0
patch=0,EE,01E5EC50,word,ffbf0018 // sd	ra,24(sp)
patch=0,EE,01E5EC54,word,0c797b00 // jal	1e5ec00 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::iterator(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]>
patch=0,EE,01E5EC58,word,03a02025 // move	a0,sp
patch=0,EE,01E5EC5C,word,27a40008 // addiu	a0,sp,8
patch=0,EE,01E5EC60,word,0c797b00 // jal	1e5ec00 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::iterator(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]>
patch=0,EE,01E5EC64,word,8c450000 // lw	a1,0(v0)
patch=0,EE,01E5EC68,word,00802825 // move	a1,a0
patch=0,EE,01E5EC6C,word,0c797aed // jal	1e5ebb4 <etl::iterator_traits<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator>::difference_type etl::distance_helper<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::bidirectional_iterator_tag) [clone .constprop.0]>
patch=0,EE,01E5EC70,word,03a02025 // move	a0,sp
patch=0,EE,01E5EC74,word,dfbf0018 // ld	ra,24(sp)
patch=0,EE,01E5EC78,word,03e00008 // jr	ra
patch=0,EE,01E5EC7C,word,27bd0020 // addiu	sp,sp,32

// Function: etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator etl::lower_bound<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, unsigned long, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::Compare>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, unsigned long const&, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::Compare)
patch=0,EE,01E5EC80,word,27bdffe0 // addiu	sp,sp,-32
patch=0,EE,01E5EC84,word,00805825 // move	a7,a0
patch=0,EE,01E5EC88,word,00a05025 // move	a6,a1
patch=0,EE,01E5EC8C,word,27a40008 // addiu	a0,sp,8
patch=0,EE,01E5EC90,word,8ca50000 // lw	a1,0(a1)
patch=0,EE,01E5EC94,word,ffbf0018 // sd	ra,24(sp)
patch=0,EE,01E5EC98,word,0c797b00 // jal	1e5ec00 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::iterator(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]>
patch=0,EE,01E5EC9C,word,00e06025 // move	t0,a3
patch=0,EE,01E5ECA0,word,8cc50000 // lw	a1,0(a2)
patch=0,EE,01E5ECA4,word,0c797b00 // jal	1e5ec00 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::iterator(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]>
patch=0,EE,01E5ECA8,word,03a02025 // move	a0,sp
patch=0,EE,01E5ECAC,word,03a02825 // move	a1,sp
patch=0,EE,01E5ECB0,word,0c797b11 // jal	1e5ec44 <etl::iterator_traits<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator>::difference_type etl::distance<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator) [clone .isra.0]>
patch=0,EE,01E5ECB4,word,8fa40008 // lw	a0,8(sp)
patch=0,EE,01E5ECB8,word,00404025 // move	a4,v0
patch=0,EE,01E5ECBC,word,1d000007 // bgtz	a4,1e5ecdc <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator etl::lower_bound<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, unsigned long, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::Compare>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, unsigned long const&, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::Compare)+0x5c>
patch=0,EE,01E5ECC0,word,8d450000 // lw	a1,0(a6)
patch=0,EE,01E5ECC4,word,01602025 // move	a0,a7
patch=0,EE,01E5ECC8,word,0c797b00 // jal	1e5ec00 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::iterator(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]>
patch=0,EE,01E5ECCC,word,01601025 // move	v0,a7
patch=0,EE,01E5ECD0,word,dfbf0018 // ld	ra,24(sp)
patch=0,EE,01E5ECD4,word,03e00008 // jr	ra
patch=0,EE,01E5ECD8,word,27bd0020 // addiu	sp,sp,32
patch=0,EE,01E5ECDC,word,03a02025 // move	a0,sp
patch=0,EE,01E5ECE0,word,0c797b00 // jal	1e5ec00 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::iterator(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]>
patch=0,EE,01E5ECE4,word,00084843 // sra	a5,a4,0x1
patch=0,EE,01E5ECE8,word,0c79796a // jal	1e5e5a8 <void etl::advance<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, int>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator&, int)>
patch=0,EE,01E5ECEC,word,01202825 // move	a1,a5
patch=0,EE,01E5ECF0,word,0c797acb // jal	1e5eb2c <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::operator*() const [clone .isra.0]>
patch=0,EE,01E5ECF4,word,8fa40000 // lw	a0,0(sp)
patch=0,EE,01E5ECF8,word,8d850000 // lw	a1,0(t0)
patch=0,EE,01E5ECFC,word,0c797ac9 // jal	1e5eb24 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::Compare::operator()(etl::pair<unsigned long const, HookData> const&, unsigned long const&) const [clone .isra.0]>
patch=0,EE,01E5ED00,word,00402025 // move	a0,v0
patch=0,EE,01E5ED04,word,10400008 // beqz	v0,1e5ed28 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator etl::lower_bound<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, unsigned long, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::Compare>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, unsigned long const&, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::Compare)+0xa8>
patch=0,EE,01E5ED08,word,00000000 // nop
patch=0,EE,01E5ED0C,word,03a02025 // move	a0,sp
patch=0,EE,01E5ED10,word,0c79794d // jal	1e5e534 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::operator++()>
patch=0,EE,01E5ED14,word,25290001 // addiu	a5,a5,1
patch=0,EE,01E5ED18,word,01402025 // move	a0,a6
patch=0,EE,01E5ED1C,word,8c450000 // lw	a1,0(v0)
patch=0,EE,01E5ED20,word,0c797acd // jal	1e5eb34 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::operator=(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]>
patch=0,EE,01E5ED24,word,01094823 // subu	a5,a4,a5
patch=0,EE,01E5ED28,word,1000ffe4 // b	1e5ecbc <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator etl::lower_bound<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, unsigned long, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::Compare>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, unsigned long const&, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::Compare)+0x3c>
patch=0,EE,01E5ED2C,word,01204025 // move	a4,a5

// Function: etl::pvoidvector::end() [clone .isra.0]
patch=0,EE,01E5ED30,word,03e00008 // jr	ra
patch=0,EE,01E5ED34,word,00801025 // move	v0,a0

// Function: etl::ivector<etl::pair<unsigned long const, HookData>*>::end()
patch=0,EE,01E5ED38,word,08797b4c // j	1e5ed30 <etl::pvoidvector::end() [clone .isra.0]>
patch=0,EE,01E5ED3C,word,8c840008 // lw	a0,8(a0)

// Function: etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::end() [clone .isra.0]
patch=0,EE,01E5ED40,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5ED44,word,00801825 // move	v1,a0
patch=0,EE,01E5ED48,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5ED4C,word,0c797b4e // jal	1e5ed38 <etl::ivector<etl::pair<unsigned long const, HookData>*>::end()>
patch=0,EE,01E5ED50,word,00a02025 // move	a0,a1
patch=0,EE,01E5ED54,word,00602025 // move	a0,v1
patch=0,EE,01E5ED58,word,00402825 // move	a1,v0
patch=0,EE,01E5ED5C,word,0c79794b // jal	1e5e52c <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::iterator(etl::pair<unsigned long const, HookData>**)>
patch=0,EE,01E5ED60,word,00601025 // move	v0,v1
patch=0,EE,01E5ED64,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5ED68,word,03e00008 // jr	ra
patch=0,EE,01E5ED6C,word,27bd0010 // addiu	sp,sp,16

// Function: etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::end()
patch=0,EE,01E5ED70,word,27bdffe0 // addiu	sp,sp,-32
patch=0,EE,01E5ED74,word,8ca50000 // lw	a1,0(a1)
patch=0,EE,01E5ED78,word,ffbf0018 // sd	ra,24(sp)
patch=0,EE,01E5ED7C,word,0c797b50 // jal	1e5ed40 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::end() [clone .isra.0]>
patch=0,EE,01E5ED80,word,afa40000 // sw	a0,0(sp)
patch=0,EE,01E5ED84,word,dfbf0018 // ld	ra,24(sp)
patch=0,EE,01E5ED88,word,8fa20000 // lw	v0,0(sp)
patch=0,EE,01E5ED8C,word,03e00008 // jr	ra
patch=0,EE,01E5ED90,word,27bd0020 // addiu	sp,sp,32

// Function: etl::pvoidvector::begin() [clone .isra.0]
patch=0,EE,01E5ED94,word,03e00008 // jr	ra
patch=0,EE,01E5ED98,word,00801025 // move	v0,a0

// Function: etl::ivector<etl::pair<unsigned long const, HookData>*>::begin()
patch=0,EE,01E5ED9C,word,08797b65 // j	1e5ed94 <etl::pvoidvector::begin() [clone .isra.0]>
patch=0,EE,01E5EDA0,word,8c840004 // lw	a0,4(a0)

// Function: etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::begin() [clone .isra.0]
patch=0,EE,01E5EDA4,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5EDA8,word,00801825 // move	v1,a0
patch=0,EE,01E5EDAC,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5EDB0,word,0c797b67 // jal	1e5ed9c <etl::ivector<etl::pair<unsigned long const, HookData>*>::begin()>
patch=0,EE,01E5EDB4,word,00a02025 // move	a0,a1
patch=0,EE,01E5EDB8,word,00602025 // move	a0,v1
patch=0,EE,01E5EDBC,word,00402825 // move	a1,v0
patch=0,EE,01E5EDC0,word,0c79794b // jal	1e5e52c <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::iterator(etl::pair<unsigned long const, HookData>**)>
patch=0,EE,01E5EDC4,word,00601025 // move	v0,v1
patch=0,EE,01E5EDC8,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5EDCC,word,03e00008 // jr	ra
patch=0,EE,01E5EDD0,word,27bd0010 // addiu	sp,sp,16

// Function: etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::begin() [clone .constprop.0]
patch=0,EE,01E5EDD4,word,3c0301e6 // lui	v1,0x1e6
patch=0,EE,01E5EDD8,word,27bdffe0 // addiu	sp,sp,-32
patch=0,EE,01E5EDDC,word,8c65fd60 // lw	a1,-672(v1)
patch=0,EE,01E5EDE0,word,ffbf0018 // sd	ra,24(sp)
patch=0,EE,01E5EDE4,word,0c797b69 // jal	1e5eda4 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::begin() [clone .isra.0]>
patch=0,EE,01E5EDE8,word,afa40000 // sw	a0,0(sp)
patch=0,EE,01E5EDEC,word,dfbf0018 // ld	ra,24(sp)
patch=0,EE,01E5EDF0,word,8fa20000 // lw	v0,0(sp)
patch=0,EE,01E5EDF4,word,03e00008 // jr	ra
patch=0,EE,01E5EDF8,word,27bd0020 // addiu	sp,sp,32

// Function: etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::clear() [clone .constprop.0]
patch=0,EE,01E5EDFC,word,27bdffe0 // addiu	sp,sp,-32
patch=0,EE,01E5EE00,word,27a40008 // addiu	a0,sp,8
patch=0,EE,01E5EE04,word,ffb00010 // sd	s0,16(sp)
patch=0,EE,01E5EE08,word,3c1001e6 // lui	s0,0x1e6
patch=0,EE,01E5EE0C,word,ffbf0018 // sd	ra,24(sp)
patch=0,EE,01E5EE10,word,0c797b75 // jal	1e5edd4 <etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::begin() [clone .constprop.0]>
patch=0,EE,01E5EE14,word,2610fd60 // addiu	s0,s0,-672
patch=0,EE,01E5EE18,word,02002825 // move	a1,s0
patch=0,EE,01E5EE1C,word,0c797b5c // jal	1e5ed70 <etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::end()>
patch=0,EE,01E5EE20,word,03a02025 // move	a0,sp
patch=0,EE,01E5EE24,word,8fa50000 // lw	a1,0(sp)
patch=0,EE,01E5EE28,word,0c797ae4 // jal	1e5eb90 <etl::operator!=(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]>
patch=0,EE,01E5EE2C,word,8fa40008 // lw	a0,8(sp)
patch=0,EE,01E5EE30,word,14400005 // bnez	v0,1e5ee48 <etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::clear() [clone .constprop.0]+0x4c>
patch=0,EE,01E5EE34,word,00000000 // nop
patch=0,EE,01E5EE38,word,dfbf0018 // ld	ra,24(sp)
patch=0,EE,01E5EE3C,word,dfb00010 // ld	s0,16(sp)
patch=0,EE,01E5EE40,word,08797954 // j	1e5e550 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::clear() [clone .constprop.0]>
patch=0,EE,01E5EE44,word,27bd0020 // addiu	sp,sp,32
patch=0,EE,01E5EE48,word,0c797acb // jal	1e5eb2c <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::operator*() const [clone .isra.0]>
patch=0,EE,01E5EE4C,word,00000000 // nop
patch=0,EE,01E5EE50,word,8e030008 // lw	v1,8(s0)
patch=0,EE,01E5EE54,word,0c79793e // jal	1e5e4f8 <rect_t* etl::addressof<rect_t>(rect_t&)>
patch=0,EE,01E5EE58,word,00402025 // move	a0,v0
patch=0,EE,01E5EE5C,word,00602025 // move	a0,v1
patch=0,EE,01E5EE60,word,0c797a7a // jal	1e5e9e8 <etl::ipool::release(void const*)>
patch=0,EE,01E5EE64,word,00402825 // move	a1,v0
patch=0,EE,01E5EE68,word,0c79794d // jal	1e5e534 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::operator++()>
patch=0,EE,01E5EE6C,word,27a40008 // addiu	a0,sp,8
patch=0,EE,01E5EE70,word,1000ffe9 // b	1e5ee18 <etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::clear() [clone .constprop.0]+0x1c>
patch=0,EE,01E5EE74,word,00000000 // nop

// Function: etl::flat_map<unsigned long, HookData, 5u, etl::less<unsigned long> >::~flat_map() [clone .constprop.0]
patch=0,EE,01E5EE78,word,08797b7f // j	1e5edfc <etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::clear() [clone .constprop.0]>
patch=0,EE,01E5EE7C,word,00000000 // nop

// Function: __static_initialization_and_destruction_0(int, int) [clone .constprop.0]
patch=0,EE,01E5EE80,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5EE84,word,24020001 // li	v0,1
patch=0,EE,01E5EE88,word,1482000a // bne	a0,v0,1e5eeb4 <__static_initialization_and_destruction_0(int, int) [clone .constprop.0]+0x34>
patch=0,EE,01E5EE8C,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5EE90,word,0c797a01 // jal	1e5e804 <etl::flat_map<unsigned long, HookData, 5u, etl::less<unsigned long> >::flat_map() [clone .constprop.0]>
patch=0,EE,01E5EE94,word,00000000 // nop
patch=0,EE,01E5EE98,word,3c022027 // lui	v0,0x2027
patch=0,EE,01E5EE9C,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5EEA0,word,3c0301e6 // lui	v1,0x1e6
patch=0,EE,01E5EEA4,word,24424b20 // addiu	v0,v0,19232
patch=0,EE,01E5EEA8,word,27bd0010 // addiu	sp,sp,16
patch=0,EE,01E5EEAC,word,08797997 // j	1e5e65c <etl::vector<rect_t, 100u>::vector() [clone .constprop.0]>
patch=0,EE,01E5EEB0,word,ac620010 // sw	v0,16(v1)
patch=0,EE,01E5EEB4,word,0c7979b0 // jal	1e5e6c0 <etl::vector<rect_t, 100u>::~vector() [clone .constprop.0]>
patch=0,EE,01E5EEB8,word,00000000 // nop
patch=0,EE,01E5EEBC,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5EEC0,word,08797b9e // j	1e5ee78 <etl::flat_map<unsigned long, HookData, 5u, etl::less<unsigned long> >::~flat_map() [clone .constprop.0]>
patch=0,EE,01E5EEC4,word,27bd0010 // addiu	sp,sp,16

// Function: etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::lower_bound(unsigned long const&) [clone .constprop.0]
patch=0,EE,01E5EEC8,word,27bdffd0 // addiu	sp,sp,-48
patch=0,EE,01E5EECC,word,3c0601e6 // lui	a2,0x1e6
patch=0,EE,01E5EED0,word,00806825 // move	t1,a0
patch=0,EE,01E5EED4,word,00a03825 // move	a3,a1
patch=0,EE,01E5EED8,word,03a02025 // move	a0,sp
patch=0,EE,01E5EEDC,word,8cc5fd60 // lw	a1,-672(a2)
patch=0,EE,01E5EEE0,word,24c6fd60 // addiu	a2,a2,-672
patch=0,EE,01E5EEE4,word,ffbf0028 // sd	ra,40(sp)
patch=0,EE,01E5EEE8,word,0c797b69 // jal	1e5eda4 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::begin() [clone .isra.0]>
patch=0,EE,01E5EEEC,word,afa50010 // sw	a1,16(sp)
patch=0,EE,01E5EEF0,word,8fa50010 // lw	a1,16(sp)
patch=0,EE,01E5EEF4,word,0c797b50 // jal	1e5ed40 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::end() [clone .isra.0]>
patch=0,EE,01E5EEF8,word,27a40008 // addiu	a0,sp,8
patch=0,EE,01E5EEFC,word,90c80004 // lbu	a4,4(a2)
patch=0,EE,01E5EF00,word,03a02825 // move	a1,sp
patch=0,EE,01E5EF04,word,27a60008 // addiu	a2,sp,8
patch=0,EE,01E5EF08,word,0c797b20 // jal	1e5ec80 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator etl::lower_bound<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, unsigned long, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::Compare>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, unsigned long const&, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::Compare)>
patch=0,EE,01E5EF0C,word,01a02025 // move	a0,t1
patch=0,EE,01E5EF10,word,dfbf0028 // ld	ra,40(sp)
patch=0,EE,01E5EF14,word,01a01025 // move	v0,t1
patch=0,EE,01E5EF18,word,03e00008 // jr	ra
patch=0,EE,01E5EF1C,word,27bd0030 // addiu	sp,sp,48

// Function: etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::lower_bound(unsigned long const&) [clone .constprop.0]
patch=0,EE,01E5EF20,word,27bdffe0 // addiu	sp,sp,-32
patch=0,EE,01E5EF24,word,ffbf0018 // sd	ra,24(sp)
patch=0,EE,01E5EF28,word,0c797bb2 // jal	1e5eec8 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::lower_bound(unsigned long const&) [clone .constprop.0]>
patch=0,EE,01E5EF2C,word,afa40000 // sw	a0,0(sp)
patch=0,EE,01E5EF30,word,dfbf0018 // ld	ra,24(sp)
patch=0,EE,01E5EF34,word,8fa20000 // lw	v0,0(sp)
patch=0,EE,01E5EF38,word,03e00008 // jr	ra
patch=0,EE,01E5EF3C,word,27bd0020 // addiu	sp,sp,32

// Function: ta_free(void*) [clone .isra.0]
patch=0,EE,01E5EF40,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5EF44,word,00801825 // move	v1,a0
patch=0,EE,01E5EF48,word,8c460020 // lw	a2,32(v0)
patch=0,EE,01E5EF4C,word,00001025 // move	v0,zero
patch=0,EE,01E5EF50,word,8cc40004 // lw	a0,4(a2)
patch=0,EE,01E5EF54,word,14800003 // bnez	a0,1e5ef64 <ta_free(void*) [clone .isra.0]+0x24>
patch=0,EE,01E5EF58,word,00000000 // nop
patch=0,EE,01E5EF5C,word,03e00008 // jr	ra
patch=0,EE,01E5EF60,word,00000000 // nop
patch=0,EE,01E5EF64,word,8c870000 // lw	a3,0(a0)
patch=0,EE,01E5EF68,word,14e3000c // bne	a3,v1,1e5ef9c <ta_free(void*) [clone .isra.0]+0x5c>
patch=0,EE,01E5EF6C,word,8c850004 // lw	a1,4(a0)
patch=0,EE,01E5EF70,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5EF74,word,10400007 // beqz	v0,1e5ef94 <ta_free(void*) [clone .isra.0]+0x54>
patch=0,EE,01E5EF78,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5EF7C,word,ac450004 // sw	a1,4(v0)
patch=0,EE,01E5EF80,word,0c797808 // jal	1e5e020 <insert_block(Block*)>
patch=0,EE,01E5EF84,word,00000000 // nop
patch=0,EE,01E5EF88,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5EF8C,word,0879782b // j	1e5e0ac <compact()>
patch=0,EE,01E5EF90,word,27bd0010 // addiu	sp,sp,16
patch=0,EE,01E5EF94,word,1000fffa // b	1e5ef80 <ta_free(void*) [clone .isra.0]+0x40>
patch=0,EE,01E5EF98,word,acc50004 // sw	a1,4(a2)
patch=0,EE,01E5EF9C,word,00801025 // move	v0,a0
patch=0,EE,01E5EFA0,word,1000ffec // b	1e5ef54 <ta_free(void*) [clone .isra.0]+0x14>
patch=0,EE,01E5EFA4,word,00a02025 // move	a0,a1

// Function: mymemmove(void*, void const*, unsigned int) [clone .isra.0]
patch=0,EE,01E5EFA8,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5EFAC,word,00806825 // move	t1,a0
patch=0,EE,01E5EFB0,word,00c02025 // move	a0,a2
patch=0,EE,01E5EFB4,word,00a07025 // move	t2,a1
patch=0,EE,01E5EFB8,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5EFBC,word,0c7978bf // jal	1e5e2fc <ta_alloc(unsigned int)>
patch=0,EE,01E5EFC0,word,00c06025 // move	t0,a2
patch=0,EE,01E5EFC4,word,00001825 // move	v1,zero
patch=0,EE,01E5EFC8,word,146c0008 // bne	v1,t0,1e5efec <mymemmove(void*, void const*, unsigned int) [clone .isra.0]+0x44>
patch=0,EE,01E5EFCC,word,00000000 // nop
patch=0,EE,01E5EFD0,word,00001825 // move	v1,zero
patch=0,EE,01E5EFD4,word,146c000b // bne	v1,t0,1e5f004 <mymemmove(void*, void const*, unsigned int) [clone .isra.0]+0x5c>
patch=0,EE,01E5EFD8,word,00000000 // nop
patch=0,EE,01E5EFDC,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5EFE0,word,00402025 // move	a0,v0
patch=0,EE,01E5EFE4,word,08797bd0 // j	1e5ef40 <ta_free(void*) [clone .isra.0]>
patch=0,EE,01E5EFE8,word,27bd0010 // addiu	sp,sp,16
patch=0,EE,01E5EFEC,word,01c32021 // addu	a0,t2,v1
patch=0,EE,01E5EFF0,word,80850000 // lb	a1,0(a0)
patch=0,EE,01E5EFF4,word,00432021 // addu	a0,v0,v1
patch=0,EE,01E5EFF8,word,a0850000 // sb	a1,0(a0)
patch=0,EE,01E5EFFC,word,1000fff2 // b	1e5efc8 <mymemmove(void*, void const*, unsigned int) [clone .isra.0]+0x20>
patch=0,EE,01E5F000,word,24630001 // addiu	v1,v1,1
patch=0,EE,01E5F004,word,00432021 // addu	a0,v0,v1
patch=0,EE,01E5F008,word,80850000 // lb	a1,0(a0)
patch=0,EE,01E5F00C,word,01a32021 // addu	a0,t1,v1
patch=0,EE,01E5F010,word,a0850000 // sb	a1,0(a0)
patch=0,EE,01E5F014,word,1000ffef // b	1e5efd4 <mymemmove(void*, void const*, unsigned int) [clone .isra.0]+0x2c>
patch=0,EE,01E5F018,word,24630001 // addiu	v1,v1,1

// Function: etl::enable_if<(etl::is_pointer<void**>::value&&etl::is_pointer<void**>::value)&&etl::is_trivially_copyable<etl::iterator_traits<void**>::value_type>::value, void**>::type etl::copy_backward<void**, void**>(void**, void**, void**) [clone .isra.0]
patch=0,EE,01E5F01C,word,00c01025 // move	v0,a2
patch=0,EE,01E5F020,word,00a43023 // subu	a2,a1,a0
patch=0,EE,01E5F024,word,00802825 // move	a1,a0
patch=0,EE,01E5F028,word,08797bea // j	1e5efa8 <mymemmove(void*, void const*, unsigned int) [clone .isra.0]>
patch=0,EE,01E5F02C,word,00462023 // subu	a0,v0,a2

// Function: etl::pvoidvector::insert(void* const*, void*) [clone .isra.0]
patch=0,EE,01E5F030,word,27bdffd0 // addiu	sp,sp,-48
patch=0,EE,01E5F034,word,ffb00010 // sd	s0,16(sp)
patch=0,EE,01E5F038,word,00808025 // move	s0,a0
patch=0,EE,01E5F03C,word,00a02025 // move	a0,a1
patch=0,EE,01E5F040,word,ffbf0028 // sd	ra,40(sp)
patch=0,EE,01E5F044,word,ffb20020 // sd	s2,32(sp)
patch=0,EE,01E5F048,word,00c09025 // move	s2,a2
patch=0,EE,01E5F04C,word,0c7979e5 // jal	1e5e794 <etl::pvoidvector::to_iterator(void* const*) const [clone .constprop.0]>
patch=0,EE,01E5F050,word,ffb10018 // sd	s1,24(sp)
patch=0,EE,01E5F054,word,02002025 // move	a0,s0
patch=0,EE,01E5F058,word,0c7978d2 // jal	1e5e348 <etl::pvoidvector::size() const>
patch=0,EE,01E5F05C,word,00408825 // move	s1,v0
patch=0,EE,01E5F060,word,8e030000 // lw	v1,0(s0)
patch=0,EE,01E5F064,word,14430005 // bne	v0,v1,1e5f07c <etl::pvoidvector::insert(void* const*, void*) [clone .isra.0]+0x4c>
patch=0,EE,01E5F068,word,00000000 // nop
patch=0,EE,01E5F06C,word,0c797a13 // jal	1e5e84c <etl::vector_full::vector_full(char const*, int) [clone .constprop.0]>
patch=0,EE,01E5F070,word,03a02025 // move	a0,sp
patch=0,EE,01E5F074,word,0c797a2e // jal	1e5e8b8 <etl::error_handler::error(etl::exception const&)>
patch=0,EE,01E5F078,word,00000000 // nop
patch=0,EE,01E5F07C,word,8e030008 // lw	v1,8(s0)
patch=0,EE,01E5F080,word,0c797b4c // jal	1e5ed30 <etl::pvoidvector::end() [clone .isra.0]>
patch=0,EE,01E5F084,word,00602025 // move	a0,v1
patch=0,EE,01E5F088,word,24640004 // addiu	a0,v1,4
patch=0,EE,01E5F08C,word,1222000e // beq	s1,v0,1e5f0c8 <etl::pvoidvector::insert(void* const*, void*) [clone .isra.0]+0x98>
patch=0,EE,01E5F090,word,ae040008 // sw	a0,8(s0)
patch=0,EE,01E5F094,word,0c797b4c // jal	1e5ed30 <etl::pvoidvector::end() [clone .isra.0]>
patch=0,EE,01E5F098,word,00000000 // nop
patch=0,EE,01E5F09C,word,02202025 // move	a0,s1
patch=0,EE,01E5F0A0,word,00403025 // move	a2,v0
patch=0,EE,01E5F0A4,word,0c797c07 // jal	1e5f01c <etl::enable_if<(etl::is_pointer<void**>::value&&etl::is_pointer<void**>::value)&&etl::is_trivially_copyable<etl::iterator_traits<void**>::value_type>::value, void**>::type etl::copy_backward<void**, void**>(void**, void**, void**) [clone .isra.0]>
patch=0,EE,01E5F0A8,word,2445fffc // addiu	a1,v0,-4
patch=0,EE,01E5F0AC,word,ae320000 // sw	s2,0(s1)
patch=0,EE,01E5F0B0,word,dfbf0028 // ld	ra,40(sp)
patch=0,EE,01E5F0B4,word,dfb20020 // ld	s2,32(sp)
patch=0,EE,01E5F0B8,word,dfb10018 // ld	s1,24(sp)
patch=0,EE,01E5F0BC,word,dfb00010 // ld	s0,16(sp)
patch=0,EE,01E5F0C0,word,03e00008 // jr	ra
patch=0,EE,01E5F0C4,word,27bd0030 // addiu	sp,sp,48
patch=0,EE,01E5F0C8,word,1000fff9 // b	1e5f0b0 <etl::pvoidvector::insert(void* const*, void*) [clone .isra.0]+0x80>
patch=0,EE,01E5F0CC,word,ac720000 // sw	s2,0(v1)

// Function: etl::ivector<etl::pair<unsigned long const, HookData>*>::insert(etl::pair<unsigned long const, HookData>* const*, etl::pair<unsigned long const, HookData>*) [clone .isra.0]
patch=0,EE,01E5F0D0,word,08797c0c // j	1e5f030 <etl::pvoidvector::insert(void* const*, void*) [clone .isra.0]>
patch=0,EE,01E5F0D4,word,00000000 // nop

// Function: etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::insert_at(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::pair<unsigned long const, HookData>&) [clone .constprop.0]
patch=0,EE,01E5F0D8,word,27bdffc0 // addiu	sp,sp,-64
patch=0,EE,01E5F0DC,word,ffb30030 // sd	s3,48(sp)
patch=0,EE,01E5F0E0,word,3c1301e6 // lui	s3,0x1e6
patch=0,EE,01E5F0E4,word,8e67fd60 // lw	a3,-672(s3)
patch=0,EE,01E5F0E8,word,ffb10020 // sd	s1,32(sp)
patch=0,EE,01E5F0EC,word,00a08825 // move	s1,a1
patch=0,EE,01E5F0F0,word,ffb00018 // sd	s0,24(sp)
patch=0,EE,01E5F0F4,word,00e02825 // move	a1,a3
patch=0,EE,01E5F0F8,word,00808025 // move	s0,a0
patch=0,EE,01E5F0FC,word,03a02025 // move	a0,sp
patch=0,EE,01E5F100,word,ffbf0038 // sd	ra,56(sp)
patch=0,EE,01E5F104,word,0c797b50 // jal	1e5ed40 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::end() [clone .isra.0]>
patch=0,EE,01E5F108,word,ffb20028 // sd	s2,40(sp)
patch=0,EE,01E5F10C,word,00c09025 // move	s2,a2
patch=0,EE,01E5F110,word,03a02825 // move	a1,sp
patch=0,EE,01E5F114,word,02002025 // move	a0,s0
patch=0,EE,01E5F118,word,27a6000c // addiu	a2,sp,12
patch=0,EE,01E5F11C,word,0c797b02 // jal	1e5ec08 <etl::pair<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, bool>::pair<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator&, bool>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator&, bool&&) [clone .constprop.0]>
patch=0,EE,01E5F120,word,a3a0000c // sb	zero,12(sp)
patch=0,EE,01E5F124,word,00e02825 // move	a1,a3
patch=0,EE,01E5F128,word,0c797b50 // jal	1e5ed40 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::end() [clone .isra.0]>
patch=0,EE,01E5F12C,word,03a02025 // move	a0,sp
patch=0,EE,01E5F130,word,8e240000 // lw	a0,0(s1)
patch=0,EE,01E5F134,word,0c797ae1 // jal	1e5eb84 <etl::operator==(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]>
patch=0,EE,01E5F138,word,8fa50000 // lw	a1,0(sp)
patch=0,EE,01E5F13C,word,10400021 // beqz	v0,1e5f1c4 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::insert_at(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::pair<unsigned long const, HookData>&) [clone .constprop.0]+0xec>
patch=0,EE,01E5F140,word,00000000 // nop
patch=0,EE,01E5F144,word,0c7978d7 // jal	1e5e35c <etl::pvoidvector::full() const>
patch=0,EE,01E5F148,word,00e02025 // move	a0,a3
patch=0,EE,01E5F14C,word,10400008 // beqz	v0,1e5f170 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::insert_at(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::pair<unsigned long const, HookData>&) [clone .constprop.0]+0x98>
patch=0,EE,01E5F150,word,00000000 // nop
patch=0,EE,01E5F154,word,3c0501e6 // lui	a1,0x1e6
patch=0,EE,01E5F158,word,240603f8 // li	a2,1016
patch=0,EE,01E5F15C,word,24a5fea8 // addiu	a1,a1,-344
patch=0,EE,01E5F160,word,0c7979e3 // jal	1e5e78c <etl::flat_map_full::flat_map_full(char const*, int)>
patch=0,EE,01E5F164,word,03a02025 // move	a0,sp
patch=0,EE,01E5F168,word,0c797a2e // jal	1e5e8b8 <etl::error_handler::error(etl::exception const&)>
patch=0,EE,01E5F16C,word,00000000 // nop
patch=0,EE,01E5F170,word,02402825 // move	a1,s2
patch=0,EE,01E5F174,word,0c797940 // jal	1e5e500 <etl::ivector<etl::pair<unsigned long const, HookData>*>::push_back(etl::pair<unsigned long const, HookData>*)>
patch=0,EE,01E5F178,word,8e64fd60 // lw	a0,-672(s3)
patch=0,EE,01E5F17C,word,8e65fd60 // lw	a1,-672(s3)
patch=0,EE,01E5F180,word,0c797b50 // jal	1e5ed40 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::end() [clone .isra.0]>
patch=0,EE,01E5F184,word,03a02025 // move	a0,sp
patch=0,EE,01E5F188,word,0c797942 // jal	1e5e508 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::operator--()>
patch=0,EE,01E5F18C,word,03a02025 // move	a0,sp
patch=0,EE,01E5F190,word,02002025 // move	a0,s0
patch=0,EE,01E5F194,word,0c797acd // jal	1e5eb34 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::operator=(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]>
patch=0,EE,01E5F198,word,8c450000 // lw	a1,0(v0)
patch=0,EE,01E5F19C,word,24020001 // li	v0,1
patch=0,EE,01E5F1A0,word,a2020004 // sb	v0,4(s0)
patch=0,EE,01E5F1A4,word,dfbf0038 // ld	ra,56(sp)
patch=0,EE,01E5F1A8,word,02001025 // move	v0,s0
patch=0,EE,01E5F1AC,word,dfb30030 // ld	s3,48(sp)
patch=0,EE,01E5F1B0,word,dfb20028 // ld	s2,40(sp)
patch=0,EE,01E5F1B4,word,dfb10020 // ld	s1,32(sp)
patch=0,EE,01E5F1B8,word,dfb00018 // ld	s0,24(sp)
patch=0,EE,01E5F1BC,word,03e00008 // jr	ra
patch=0,EE,01E5F1C0,word,27bd0040 // addiu	sp,sp,64
patch=0,EE,01E5F1C4,word,00802825 // move	a1,a0
patch=0,EE,01E5F1C8,word,0c797acd // jal	1e5eb34 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::operator=(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]>
patch=0,EE,01E5F1CC,word,02002025 // move	a0,s0
patch=0,EE,01E5F1D0,word,0c797adf // jal	1e5eb7c <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::operator->() const [clone .isra.0]>
patch=0,EE,01E5F1D4,word,8e240000 // lw	a0,0(s1)
patch=0,EE,01E5F1D8,word,8e450000 // lw	a1,0(s2)
patch=0,EE,01E5F1DC,word,0c797ab9 // jal	1e5eae4 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::keys_are_equal(unsigned long const&, unsigned long const&) const [clone .constprop.0] [clone .isra.0]>
patch=0,EE,01E5F1E0,word,8c440000 // lw	a0,0(v0)
patch=0,EE,01E5F1E4,word,1440ffef // bnez	v0,1e5f1a4 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::insert_at(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::pair<unsigned long const, HookData>&) [clone .constprop.0]+0xcc>
patch=0,EE,01E5F1E8,word,00000000 // nop
patch=0,EE,01E5F1EC,word,0c7978d7 // jal	1e5e35c <etl::pvoidvector::full() const>
patch=0,EE,01E5F1F0,word,00e02025 // move	a0,a3
patch=0,EE,01E5F1F4,word,10400008 // beqz	v0,1e5f218 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::insert_at(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::pair<unsigned long const, HookData>&) [clone .constprop.0]+0x140>
patch=0,EE,01E5F1F8,word,00000000 // nop
patch=0,EE,01E5F1FC,word,3c0501e6 // lui	a1,0x1e6
patch=0,EE,01E5F200,word,24060407 // li	a2,1031
patch=0,EE,01E5F204,word,24a5fea8 // addiu	a1,a1,-344
patch=0,EE,01E5F208,word,0c7979e3 // jal	1e5e78c <etl::flat_map_full::flat_map_full(char const*, int)>
patch=0,EE,01E5F20C,word,03a02025 // move	a0,sp
patch=0,EE,01E5F210,word,0c797a2e // jal	1e5e8b8 <etl::error_handler::error(etl::exception const&)>
patch=0,EE,01E5F214,word,00000000 // nop
patch=0,EE,01E5F218,word,02403025 // move	a2,s2
patch=0,EE,01E5F21C,word,8e250000 // lw	a1,0(s1)
patch=0,EE,01E5F220,word,0c797c34 // jal	1e5f0d0 <etl::ivector<etl::pair<unsigned long const, HookData>*>::insert(etl::pair<unsigned long const, HookData>* const*, etl::pair<unsigned long const, HookData>*) [clone .isra.0]>
patch=0,EE,01E5F224,word,8e64fd60 // lw	a0,-672(s3)
patch=0,EE,01E5F228,word,1000ffdc // b	1e5f19c <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::insert_at(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::pair<unsigned long const, HookData>&) [clone .constprop.0]+0xc4>
patch=0,EE,01E5F22C,word,00000000 // nop

// Function: etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::insert(etl::pair<unsigned long const, HookData>&&) [clone .constprop.0]
patch=0,EE,01E5F230,word,27bdffc0 // addiu	sp,sp,-64
patch=0,EE,01E5F234,word,ffb00020 // sd	s0,32(sp)
patch=0,EE,01E5F238,word,00808025 // move	s0,a0
patch=0,EE,01E5F23C,word,27a40018 // addiu	a0,sp,24
patch=0,EE,01E5F240,word,ffbf0038 // sd	ra,56(sp)
patch=0,EE,01E5F244,word,ffb20030 // sd	s2,48(sp)
patch=0,EE,01E5F248,word,3c1201e6 // lui	s2,0x1e6
patch=0,EE,01E5F24C,word,ffb10028 // sd	s1,40(sp)
patch=0,EE,01E5F250,word,0c797bc8 // jal	1e5ef20 <etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::lower_bound(unsigned long const&) [clone .constprop.0]>
patch=0,EE,01E5F254,word,00a08825 // move	s1,a1
patch=0,EE,01E5F258,word,27a50018 // addiu	a1,sp,24
patch=0,EE,01E5F25C,word,02002025 // move	a0,s0
patch=0,EE,01E5F260,word,03a03025 // move	a2,sp
patch=0,EE,01E5F264,word,0c797b02 // jal	1e5ec08 <etl::pair<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, bool>::pair<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator&, bool>(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator&, bool&&) [clone .constprop.0]>
patch=0,EE,01E5F268,word,a3a00000 // sb	zero,0(sp)
patch=0,EE,01E5F26C,word,2645fd60 // addiu	a1,s2,-672
patch=0,EE,01E5F270,word,0c797b5c // jal	1e5ed70 <etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::end()>
patch=0,EE,01E5F274,word,03a02025 // move	a0,sp
patch=0,EE,01E5F278,word,8fa50000 // lw	a1,0(sp)
patch=0,EE,01E5F27C,word,0c797ae1 // jal	1e5eb84 <etl::operator==(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&, etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]>
patch=0,EE,01E5F280,word,8fa40018 // lw	a0,24(sp)
patch=0,EE,01E5F284,word,14400008 // bnez	v0,1e5f2a8 <etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::insert(etl::pair<unsigned long const, HookData>&&) [clone .constprop.0]+0x78>
patch=0,EE,01E5F288,word,00000000 // nop
patch=0,EE,01E5F28C,word,0c797adf // jal	1e5eb7c <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::operator->() const [clone .isra.0]>
patch=0,EE,01E5F290,word,00000000 // nop
patch=0,EE,01E5F294,word,8e240000 // lw	a0,0(s1)
patch=0,EE,01E5F298,word,0c797ab7 // jal	1e5eadc <etl::less<unsigned long>::operator()(unsigned long const&, unsigned long const&) const [clone .constprop.0] [clone .isra.0]>
patch=0,EE,01E5F29C,word,8c450000 // lw	a1,0(v0)
patch=0,EE,01E5F2A0,word,10400020 // beqz	v0,1e5f324 <etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::insert(etl::pair<unsigned long const, HookData>&&) [clone .constprop.0]+0xf4>
patch=0,EE,01E5F2A4,word,00000000 // nop
patch=0,EE,01E5F2A8,word,0c797973 // jal	1e5e5cc <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::full() const [clone .constprop.0]>
patch=0,EE,01E5F2AC,word,00000000 // nop
patch=0,EE,01E5F2B0,word,10400008 // beqz	v0,1e5f2d4 <etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::insert(etl::pair<unsigned long const, HookData>&&) [clone .constprop.0]+0xa4>
patch=0,EE,01E5F2B4,word,00000000 // nop
patch=0,EE,01E5F2B8,word,3c0501e6 // lui	a1,0x1e6
patch=0,EE,01E5F2BC,word,2406015a // li	a2,346
patch=0,EE,01E5F2C0,word,24a5fed8 // addiu	a1,a1,-296
patch=0,EE,01E5F2C4,word,0c7979e3 // jal	1e5e78c <etl::flat_map_full::flat_map_full(char const*, int)>
patch=0,EE,01E5F2C8,word,03a02025 // move	a0,sp
patch=0,EE,01E5F2CC,word,0c797a2e // jal	1e5e8b8 <etl::error_handler::error(etl::exception const&)>
patch=0,EE,01E5F2D0,word,00000000 // nop
patch=0,EE,01E5F2D4,word,2652fd60 // addiu	s2,s2,-672
patch=0,EE,01E5F2D8,word,0c797a7c // jal	1e5e9f0 <etl::pair<unsigned long const, HookData>* etl::ipool::allocate<etl::pair<unsigned long const, HookData> >()>
patch=0,EE,01E5F2DC,word,8e440008 // lw	a0,8(s2)
patch=0,EE,01E5F2E0,word,02202025 // move	a0,s1
patch=0,EE,01E5F2E4,word,0c7978f7 // jal	1e5e3dc <etl::remove_reference<etl::pair<unsigned long const, HookData>&>::type&& etl::move<etl::pair<unsigned long const, HookData>&>(etl::pair<unsigned long const, HookData>&)>
patch=0,EE,01E5F2E8,word,00403025 // move	a2,v0
patch=0,EE,01E5F2EC,word,00c02025 // move	a0,a2
patch=0,EE,01E5F2F0,word,0c797a15 // jal	1e5e854 <operator new(unsigned int, void*) [clone .constprop.0]>
patch=0,EE,01E5F2F4,word,00402825 // move	a1,v0
patch=0,EE,01E5F2F8,word,0c79792c // jal	1e5e4b0 <etl::pair<unsigned long const, HookData>::pair<unsigned long const, HookData>(etl::pair<unsigned long const, HookData>&&)>
patch=0,EE,01E5F2FC,word,00402025 // move	a0,v0
patch=0,EE,01E5F300,word,27a40010 // addiu	a0,sp,16
patch=0,EE,01E5F304,word,0c797b00 // jal	1e5ec00 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::iterator(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator const&) [clone .isra.0]>
patch=0,EE,01E5F308,word,8fa50018 // lw	a1,24(sp)
patch=0,EE,01E5F30C,word,00802825 // move	a1,a0
patch=0,EE,01E5F310,word,0c797c36 // jal	1e5f0d8 <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::insert_at(etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, etl::pair<unsigned long const, HookData>&) [clone .constprop.0]>
patch=0,EE,01E5F314,word,03a02025 // move	a0,sp
patch=0,EE,01E5F318,word,03a02825 // move	a1,sp
patch=0,EE,01E5F31C,word,0c797acf // jal	1e5eb3c <etl::pair<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, bool>::operator=(etl::pair<etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator, bool>&&) [clone .isra.0]>
patch=0,EE,01E5F320,word,02002025 // move	a0,s0
patch=0,EE,01E5F324,word,dfbf0038 // ld	ra,56(sp)
patch=0,EE,01E5F328,word,02001025 // move	v0,s0
patch=0,EE,01E5F32C,word,dfb20030 // ld	s2,48(sp)
patch=0,EE,01E5F330,word,dfb10028 // ld	s1,40(sp)
patch=0,EE,01E5F334,word,dfb00020 // ld	s0,32(sp)
patch=0,EE,01E5F338,word,03e00008 // jr	ra
patch=0,EE,01E5F33C,word,27bd0040 // addiu	sp,sp,64

// Function: etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::operator[](unsigned long const&) [clone .constprop.0]
patch=0,EE,01E5F340,word,27bdffb0 // addiu	sp,sp,-80
patch=0,EE,01E5F344,word,00802825 // move	a1,a0
patch=0,EE,01E5F348,word,27a60020 // addiu	a2,sp,32
patch=0,EE,01E5F34C,word,27a40010 // addiu	a0,sp,16
patch=0,EE,01E5F350,word,ffbf0048 // sd	ra,72(sp)
patch=0,EE,01E5F354,word,ffa00020 // sd	zero,32(sp)
patch=0,EE,01E5F358,word,0c79791d // jal	1e5e474 <etl::pair<unsigned long const&, HookData> etl::make_pair<unsigned long const&, HookData>(unsigned long const&, HookData&&)>
patch=0,EE,01E5F35C,word,afa00028 // sw	zero,40(sp)
patch=0,EE,01E5F360,word,27a50010 // addiu	a1,sp,16
patch=0,EE,01E5F364,word,0c7978f9 // jal	1e5e3e4 <etl::pair<unsigned long const, HookData>::pair<unsigned long const&, HookData>(etl::pair<unsigned long const&, HookData>&&)>
patch=0,EE,01E5F368,word,03a02025 // move	a0,sp
patch=0,EE,01E5F36C,word,27a40030 // addiu	a0,sp,48
patch=0,EE,01E5F370,word,0c797c8c // jal	1e5f230 <etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::insert(etl::pair<unsigned long const, HookData>&&) [clone .constprop.0]>
patch=0,EE,01E5F374,word,03a02825 // move	a1,sp
patch=0,EE,01E5F378,word,0c797adf // jal	1e5eb7c <etl::ireference_flat_map<unsigned long, HookData, etl::less<unsigned long> >::iterator::operator->() const [clone .isra.0]>
patch=0,EE,01E5F37C,word,8fa40030 // lw	a0,48(sp)
patch=0,EE,01E5F380,word,dfbf0048 // ld	ra,72(sp)
patch=0,EE,01E5F384,word,24420004 // addiu	v0,v0,4
patch=0,EE,01E5F388,word,03e00008 // jr	ra
patch=0,EE,01E5F38C,word,27bd0050 // addiu	sp,sp,80

// Function: etl::exception::what() const [clone .isra.0]
patch=0,EE,01E5F390,word,03e00008 // jr	ra
patch=0,EE,01E5F394,word,00801025 // move	v0,a0

// Function: hook(unsigned long, unsigned long)
patch=0,EE,01E5F398,word,27bdffe0 // addiu	sp,sp,-32
patch=0,EE,01E5F39C,word,afa40000 // sw	a0,0(sp)
patch=0,EE,01E5F3A0,word,03a02025 // move	a0,sp
patch=0,EE,01E5F3A4,word,ffb00010 // sd	s0,16(sp)
patch=0,EE,01E5F3A8,word,ffbf0018 // sd	ra,24(sp)
patch=0,EE,01E5F3AC,word,0c797cd0 // jal	1e5f340 <etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::operator[](unsigned long const&) [clone .constprop.0]>
patch=0,EE,01E5F3B0,word,00a08025 // move	s0,a1
patch=0,EE,01E5F3B4,word,ac500000 // sw	s0,0(v0)
patch=0,EE,01E5F3B8,word,00108082 // srl	s0,s0,0x2
patch=0,EE,01E5F3BC,word,8fa30000 // lw	v1,0(sp)
patch=0,EE,01E5F3C0,word,8c640000 // lw	a0,0(v1)
patch=0,EE,01E5F3C4,word,ac440004 // sw	a0,4(v0)
patch=0,EE,01E5F3C8,word,8c640004 // lw	a0,4(v1)
patch=0,EE,01E5F3CC,word,ac440008 // sw	a0,8(v0)
patch=0,EE,01E5F3D0,word,3c020800 // lui	v0,0x800
patch=0,EE,01E5F3D4,word,02028025 // or	s0,s0,v0
patch=0,EE,01E5F3D8,word,dfbf0018 // ld	ra,24(sp)
patch=0,EE,01E5F3DC,word,ac700000 // sw	s0,0(v1)
patch=0,EE,01E5F3E0,word,ac600004 // sw	zero,4(v1)
patch=0,EE,01E5F3E4,word,dfb00010 // ld	s0,16(sp)
patch=0,EE,01E5F3E8,word,03e00008 // jr	ra
patch=0,EE,01E5F3EC,word,27bd0020 // addiu	sp,sp,32

// Function: unhook(unsigned long)
patch=0,EE,01E5F3F0,word,27bdffe0 // addiu	sp,sp,-32
patch=0,EE,01E5F3F4,word,afa40000 // sw	a0,0(sp)
patch=0,EE,01E5F3F8,word,ffbf0018 // sd	ra,24(sp)
patch=0,EE,01E5F3FC,word,0c797cd0 // jal	1e5f340 <etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::operator[](unsigned long const&) [clone .constprop.0]>
patch=0,EE,01E5F400,word,03a02025 // move	a0,sp
patch=0,EE,01E5F404,word,8c440004 // lw	a0,4(v0)
patch=0,EE,01E5F408,word,8fa30000 // lw	v1,0(sp)
patch=0,EE,01E5F40C,word,ac640000 // sw	a0,0(v1)
patch=0,EE,01E5F410,word,8c420008 // lw	v0,8(v0)
patch=0,EE,01E5F414,word,dfbf0018 // ld	ra,24(sp)
patch=0,EE,01E5F418,word,ac620004 // sw	v0,4(v1)
patch=0,EE,01E5F41C,word,03e00008 // jr	ra
patch=0,EE,01E5F420,word,27bd0020 // addiu	sp,sp,32

// Function: rehook(unsigned long)
patch=0,EE,01E5F424,word,27bdffe0 // addiu	sp,sp,-32
patch=0,EE,01E5F428,word,afa40000 // sw	a0,0(sp)
patch=0,EE,01E5F42C,word,ffbf0018 // sd	ra,24(sp)
patch=0,EE,01E5F430,word,0c797cd0 // jal	1e5f340 <etl::iflat_map<unsigned long, HookData, etl::less<unsigned long> >::operator[](unsigned long const&) [clone .constprop.0]>
patch=0,EE,01E5F434,word,03a02025 // move	a0,sp
patch=0,EE,01E5F438,word,8c420000 // lw	v0,0(v0)
patch=0,EE,01E5F43C,word,3c040800 // lui	a0,0x800
patch=0,EE,01E5F440,word,00021082 // srl	v0,v0,0x2
patch=0,EE,01E5F444,word,8fa30000 // lw	v1,0(sp)
patch=0,EE,01E5F448,word,dfbf0018 // ld	ra,24(sp)
patch=0,EE,01E5F44C,word,00441025 // or	v0,v0,a0
patch=0,EE,01E5F450,word,ac620000 // sw	v0,0(v1)
patch=0,EE,01E5F454,word,ac600004 // sw	zero,4(v1)
patch=0,EE,01E5F458,word,03e00008 // jr	ra
patch=0,EE,01E5F45C,word,27bd0020 // addiu	sp,sp,32

// Function: ps2_puts(char const*, bool)
patch=0,EE,01E5F460,word,27bdffe0 // addiu	sp,sp,-32
patch=0,EE,01E5F464,word,ffb20010 // sd	s2,16(sp)
patch=0,EE,01E5F468,word,3c120021 // lui	s2,0x21
patch=0,EE,01E5F46C,word,ffb10008 // sd	s1,8(sp)
patch=0,EE,01E5F470,word,265235f8 // addiu	s2,s2,13816
patch=0,EE,01E5F474,word,ffb00000 // sd	s0,0(sp)
patch=0,EE,01E5F478,word,00a08825 // move	s1,a1
patch=0,EE,01E5F47C,word,ffbf0018 // sd	ra,24(sp)
patch=0,EE,01E5F480,word,00808025 // move	s0,a0
patch=0,EE,01E5F484,word,82040000 // lb	a0,0(s0)
patch=0,EE,01E5F488,word,1480000c // bnez	a0,1e5f4bc <ps2_puts(char const*, bool)+0x5c>
patch=0,EE,01E5F48C,word,00000000 // nop
patch=0,EE,01E5F490,word,12200010 // beqz	s1,1e5f4d4 <ps2_puts(char const*, bool)+0x74>
patch=0,EE,01E5F494,word,00000000 // nop
patch=0,EE,01E5F498,word,3c190021 // lui	t9,0x21
patch=0,EE,01E5F49C,word,dfbf0018 // ld	ra,24(sp)
patch=0,EE,01E5F4A0,word,dfb20010 // ld	s2,16(sp)
patch=0,EE,01E5F4A4,word,2404000a // li	a0,10
patch=0,EE,01E5F4A8,word,dfb10008 // ld	s1,8(sp)
patch=0,EE,01E5F4AC,word,273935f8 // addiu	t9,t9,13816
patch=0,EE,01E5F4B0,word,dfb00000 // ld	s0,0(sp)
patch=0,EE,01E5F4B4,word,03200008 // jr	t9
patch=0,EE,01E5F4B8,word,27bd0020 // addiu	sp,sp,32
patch=0,EE,01E5F4BC,word,0004263c // dsll32	a0,a0,0x18
patch=0,EE,01E5F4C0,word,26100001 // addiu	s0,s0,1
patch=0,EE,01E5F4C4,word,0240f809 // jalr	s2
patch=0,EE,01E5F4C8,word,0004263f // dsra32	a0,a0,0x18
patch=0,EE,01E5F4CC,word,1000ffed // b	1e5f484 <ps2_puts(char const*, bool)+0x24>
patch=0,EE,01E5F4D0,word,00000000 // nop
patch=0,EE,01E5F4D4,word,dfbf0018 // ld	ra,24(sp)
patch=0,EE,01E5F4D8,word,dfb20010 // ld	s2,16(sp)
patch=0,EE,01E5F4DC,word,dfb10008 // ld	s1,8(sp)
patch=0,EE,01E5F4E0,word,dfb00000 // ld	s0,0(sp)
patch=0,EE,01E5F4E4,word,03e00008 // jr	ra
patch=0,EE,01E5F4E8,word,27bd0020 // addiu	sp,sp,32

// Function: replace_Startup()
patch=0,EE,01E5F4EC,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5F4F0,word,ffb00000 // sd	s0,0(sp)
patch=0,EE,01E5F4F4,word,3c100019 // lui	s0,0x19
patch=0,EE,01E5F4F8,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5F4FC,word,0c797cfc // jal	1e5f3f0 <unhook(unsigned long)>
patch=0,EE,01E5F500,word,26042770 // addiu	a0,s0,10096
patch=0,EE,01E5F504,word,3c0401e6 // lui	a0,0x1e6
patch=0,EE,01E5F508,word,24050001 // li	a1,1
patch=0,EE,01E5F50C,word,2484fef8 // addiu	a0,a0,-264
patch=0,EE,01E5F510,word,0c797d18 // jal	1e5f460 <ps2_puts(char const*, bool)>
patch=0,EE,01E5F514,word,36102770 // ori	s0,s0,0x2770
patch=0,EE,01E5F518,word,0200f809 // jalr	s0
patch=0,EE,01E5F51C,word,00000000 // nop
patch=0,EE,01E5F520,word,3c0401e6 // lui	a0,0x1e6
patch=0,EE,01E5F524,word,2484ff08 // addiu	a0,a0,-248
patch=0,EE,01E5F528,word,0c797d18 // jal	1e5f460 <ps2_puts(char const*, bool)>
patch=0,EE,01E5F52C,word,24050001 // li	a1,1
patch=0,EE,01E5F530,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5F534,word,02002025 // move	a0,s0
patch=0,EE,01E5F538,word,dfb00000 // ld	s0,0(sp)
patch=0,EE,01E5F53C,word,08797d09 // j	1e5f424 <rehook(unsigned long)>
patch=0,EE,01E5F540,word,27bd0010 // addiu	sp,sp,16

// Function: etl_error_handler(etl::exception const&)
patch=0,EE,01E5F544,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5F548,word,8c840000 // lw	a0,0(a0)
patch=0,EE,01E5F54C,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5F550,word,0c797ce4 // jal	1e5f390 <etl::exception::what() const [clone .isra.0]>
patch=0,EE,01E5F554,word,24050001 // li	a1,1
patch=0,EE,01E5F558,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5F55C,word,00402025 // move	a0,v0
patch=0,EE,01E5F560,word,08797d18 // j	1e5f460 <ps2_puts(char const*, bool)>
patch=0,EE,01E5F564,word,27bd0010 // addiu	sp,sp,16

// Function: void etl::error_handler::function_stub<&(etl_error_handler(etl::exception const&))>(void*, etl::exception const&)
patch=0,EE,01E5F568,word,08797d51 // j	1e5f544 <etl_error_handler(etl::exception const&)>
patch=0,EE,01E5F56C,word,00a02025 // move	a0,a1

// Function: wrap_FillScreenRect(int, int, int, int, float, float, float, float, orig_GIFS*)
patch=0,EE,01E5F570,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5F574,word,3c02001a // lui	v0,0x1a
patch=0,EE,01E5F578,word,3442f498 // ori	v0,v0,0xf498
patch=0,EE,01E5F57C,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5F580,word,8fa30010 // lw	v1,16(sp)
patch=0,EE,01E5F584,word,46008306 // mov.s	$f12,$f16
patch=0,EE,01E5F588,word,46008b46 // mov.s	$f13,$f17
patch=0,EE,01E5F58C,word,46009386 // mov.s	$f14,$f18
patch=0,EE,01E5F590,word,46009bc6 // mov.s	$f15,$f19
patch=0,EE,01E5F594,word,0040f809 // jalr	v0
patch=0,EE,01E5F598,word,8fa80010 // lw	a4,16(sp)
patch=0,EE,01E5F59C,word,00000000 // nop
patch=0,EE,01E5F5A0,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5F5A4,word,03e00008 // jr	ra
patch=0,EE,01E5F5A8,word,27bd0010 // addiu	sp,sp,16

// Function: wrap_CFont_DrawPchz(orig_CFont*, char*, orig_CTextBox*, orig_CTextBox*, orig_GIFS*)
patch=0,EE,01E5F5AC,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5F5B0,word,3c020016 // lui	v0,0x16
patch=0,EE,01E5F5B4,word,01001825 // move	v1,a4
patch=0,EE,01E5F5B8,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5F5BC,word,24424340 // addiu	v0,v0,17216
patch=0,EE,01E5F5C0,word,0040f809 // jalr	v0
patch=0,EE,01E5F5C4,word,00000000 // nop
patch=0,EE,01E5F5C8,word,00000000 // nop
patch=0,EE,01E5F5CC,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5F5D0,word,03e00008 // jr	ra
patch=0,EE,01E5F5D4,word,27bd0010 // addiu	sp,sp,16

// Function: randf()
patch=0,EE,01E5F5D8,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5F5DC,word,3c020021 // lui	v0,0x21
patch=0,EE,01E5F5E0,word,24422a90 // addiu	v0,v0,10896
patch=0,EE,01E5F5E4,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5F5E8,word,0040f809 // jalr	v0
patch=0,EE,01E5F5EC,word,00000000 // nop
patch=0,EE,01E5F5F0,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5F5F4,word,44820000 // mtc1	v0,$f0
patch=0,EE,01E5F5F8,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5F5FC,word,c441ff30 // lwc1	$f1,-208(v0)
patch=0,EE,01E5F600,word,27bd0010 // addiu	sp,sp,16
patch=0,EE,01E5F604,word,46800020 // cvt.s.w	$f0,$f0
patch=0,EE,01E5F608,word,03e00008 // jr	ra
patch=0,EE,01E5F60C,word,46010003 // div.s	$f0,$f0,$f1

// Function: rect_t::randomize_velocity()
patch=0,EE,01E5F610,word,27bdffe0 // addiu	sp,sp,-32
patch=0,EE,01E5F614,word,e7b6001c // swc1	$f22,28(sp)
patch=0,EE,01E5F618,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5F61C,word,e7b40018 // swc1	$f20,24(sp)
patch=0,EE,01E5F620,word,ffb00000 // sd	s0,0(sp)
patch=0,EE,01E5F624,word,0c797d76 // jal	1e5f5d8 <randf()>
patch=0,EE,01E5F628,word,00808025 // move	s0,a0
patch=0,EE,01E5F62C,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5F630,word,c456ff34 // lwc1	$f22,-204(v0)
patch=0,EE,01E5F634,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5F638,word,c454ff38 // lwc1	$f20,-200(v0)
patch=0,EE,01E5F63C,word,46160001 // sub.s	$f0,$f0,$f22
patch=0,EE,01E5F640,word,46000000 // add.s	$f0,$f0,$f0
patch=0,EE,01E5F644,word,46140000 // add.s	$f0,$f0,$f20
patch=0,EE,01E5F648,word,0c797d76 // jal	1e5f5d8 <randf()>
patch=0,EE,01E5F64C,word,e6000010 // swc1	$f0,16(s0)
patch=0,EE,01E5F650,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5F654,word,46160001 // sub.s	$f0,$f0,$f22
patch=0,EE,01E5F658,word,c7b6001c // lwc1	$f22,28(sp)
patch=0,EE,01E5F65C,word,46000000 // add.s	$f0,$f0,$f0
patch=0,EE,01E5F660,word,46140000 // add.s	$f0,$f0,$f20
patch=0,EE,01E5F664,word,c7b40018 // lwc1	$f20,24(sp)
patch=0,EE,01E5F668,word,e6000014 // swc1	$f0,20(s0)
patch=0,EE,01E5F66C,word,dfb00000 // ld	s0,0(sp)
patch=0,EE,01E5F670,word,03e00008 // jr	ra
patch=0,EE,01E5F674,word,27bd0020 // addiu	sp,sp,32

// Function: rect_t::rect_t()
patch=0,EE,01E5F678,word,27bdffd0 // addiu	sp,sp,-48
patch=0,EE,01E5F67C,word,ffbf0018 // sd	ra,24(sp)
patch=0,EE,01E5F680,word,e7b4002c // swc1	$f20,44(sp)
patch=0,EE,01E5F684,word,ffb10010 // sd	s1,16(sp)
patch=0,EE,01E5F688,word,3c110021 // lui	s1,0x21
patch=0,EE,01E5F68C,word,ffb00008 // sd	s0,8(sp)
patch=0,EE,01E5F690,word,0c797d76 // jal	1e5f5d8 <randf()>
patch=0,EE,01E5F694,word,00808025 // move	s0,a0
patch=0,EE,01E5F698,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5F69C,word,c441ff3c // lwc1	$f1,-196(v0)
patch=0,EE,01E5F6A0,word,26312a90 // addiu	s1,s1,10896
patch=0,EE,01E5F6A4,word,46010002 // mul.s	$f0,$f0,$f1
patch=0,EE,01E5F6A8,word,0c797d76 // jal	1e5f5d8 <randf()>
patch=0,EE,01E5F6AC,word,e6000000 // swc1	$f0,0(s0)
patch=0,EE,01E5F6B0,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5F6B4,word,c441ff40 // lwc1	$f1,-192(v0)
patch=0,EE,01E5F6B8,word,46010002 // mul.s	$f0,$f0,$f1
patch=0,EE,01E5F6BC,word,0220f809 // jalr	s1
patch=0,EE,01E5F6C0,word,e6000004 // swc1	$f0,4(s0)
patch=0,EE,01E5F6C4,word,30430001 // andi	v1,v0,0x1
patch=0,EE,01E5F6C8,word,9202002c // lbu	v0,44(s0)
patch=0,EE,01E5F6CC,word,304200fe // andi	v0,v0,0xfe
patch=0,EE,01E5F6D0,word,00431025 // or	v0,v0,v1
patch=0,EE,01E5F6D4,word,0220f809 // jalr	s1
patch=0,EE,01E5F6D8,word,a202002c // sb	v0,44(s0)
patch=0,EE,01E5F6DC,word,30420001 // andi	v0,v0,0x1
patch=0,EE,01E5F6E0,word,00021840 // sll	v1,v0,0x1
patch=0,EE,01E5F6E4,word,9202002c // lbu	v0,44(s0)
patch=0,EE,01E5F6E8,word,304200fd // andi	v0,v0,0xfd
patch=0,EE,01E5F6EC,word,00431025 // or	v0,v0,v1
patch=0,EE,01E5F6F0,word,0c797d76 // jal	1e5f5d8 <randf()>
patch=0,EE,01E5F6F4,word,a202002c // sb	v0,44(s0)
patch=0,EE,01E5F6F8,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5F6FC,word,46000000 // add.s	$f0,$f0,$f0
patch=0,EE,01E5F700,word,c454ff44 // lwc1	$f20,-188(v0)
patch=0,EE,01E5F704,word,46140000 // add.s	$f0,$f0,$f20
patch=0,EE,01E5F708,word,0c797d76 // jal	1e5f5d8 <randf()>
patch=0,EE,01E5F70C,word,e600001c // swc1	$f0,28(s0)
patch=0,EE,01E5F710,word,46000000 // add.s	$f0,$f0,$f0
patch=0,EE,01E5F714,word,46140000 // add.s	$f0,$f0,$f20
patch=0,EE,01E5F718,word,0c797d76 // jal	1e5f5d8 <randf()>
patch=0,EE,01E5F71C,word,e6000020 // swc1	$f0,32(s0)
patch=0,EE,01E5F720,word,46000000 // add.s	$f0,$f0,$f0
patch=0,EE,01E5F724,word,46140000 // add.s	$f0,$f0,$f20
patch=0,EE,01E5F728,word,0c797d76 // jal	1e5f5d8 <randf()>
patch=0,EE,01E5F72C,word,e6000024 // swc1	$f0,36(s0)
patch=0,EE,01E5F730,word,46140000 // add.s	$f0,$f0,$f20
patch=0,EE,01E5F734,word,0c797d76 // jal	1e5f5d8 <randf()>
patch=0,EE,01E5F738,word,e600000c // swc1	$f0,12(s0)
patch=0,EE,01E5F73C,word,dfbf0018 // ld	ra,24(sp)
patch=0,EE,01E5F740,word,46140000 // add.s	$f0,$f0,$f20
patch=0,EE,01E5F744,word,dfb10010 // ld	s1,16(sp)
patch=0,EE,01E5F748,word,c7b4002c // lwc1	$f20,44(sp)
patch=0,EE,01E5F74C,word,02002025 // move	a0,s0
patch=0,EE,01E5F750,word,e6000028 // swc1	$f0,40(s0)
patch=0,EE,01E5F754,word,dfb00008 // ld	s0,8(sp)
patch=0,EE,01E5F758,word,08797d84 // j	1e5f610 <rect_t::randomize_velocity()>
patch=0,EE,01E5F75C,word,27bd0030 // addiu	sp,sp,48

// Function: void etl::ivector<rect_t>::emplace_back<>() [clone .constprop.0]
patch=0,EE,01E5F760,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5F764,word,ffb00000 // sd	s0,0(sp)
patch=0,EE,01E5F768,word,3c1001e6 // lui	s0,0x1e6
patch=0,EE,01E5F76C,word,26100038 // addiu	s0,s0,56
patch=0,EE,01E5F770,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5F774,word,0c797a15 // jal	1e5e854 <operator new(unsigned int, void*) [clone .constprop.0]>
patch=0,EE,01E5F778,word,8e040008 // lw	a0,8(s0)
patch=0,EE,01E5F77C,word,0c797d9e // jal	1e5f678 <rect_t::rect_t()>
patch=0,EE,01E5F780,word,00402025 // move	a0,v0
patch=0,EE,01E5F784,word,8e020008 // lw	v0,8(s0)
patch=0,EE,01E5F788,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5F78C,word,24420030 // addiu	v0,v0,48
patch=0,EE,01E5F790,word,ae020008 // sw	v0,8(s0)
patch=0,EE,01E5F794,word,dfb00000 // ld	s0,0(sp)
patch=0,EE,01E5F798,word,03e00008 // jr	ra
patch=0,EE,01E5F79C,word,27bd0010 // addiu	sp,sp,16

// Function: replace_OnCoinSmack(orig_COIN*)
patch=0,EE,01E5F7A0,word,3c020027 // lui	v0,0x27
patch=0,EE,01E5F7A4,word,27bdffe0 // addiu	sp,sp,-32
patch=0,EE,01E5F7A8,word,8c4275d8 // lw	v0,30168(v0)
patch=0,EE,01E5F7AC,word,2c420004 // sltiu	v0,v0,4
patch=0,EE,01E5F7B0,word,ffb10010 // sd	s1,16(sp)
patch=0,EE,01E5F7B4,word,ffbf0018 // sd	ra,24(sp)
patch=0,EE,01E5F7B8,word,00808825 // move	s1,a0
patch=0,EE,01E5F7BC,word,1440000e // bnez	v0,1e5f7f8 <replace_OnCoinSmack(orig_COIN*)+0x58>
patch=0,EE,01E5F7C0,word,ffb00008 // sd	s0,8(sp)
patch=0,EE,01E5F7C4,word,24100007 // li	s0,7
patch=0,EE,01E5F7C8,word,0c79799e // jal	1e5e678 <etl::ivector<rect_t>::size() const [clone .constprop.0]>
patch=0,EE,01E5F7CC,word,00000000 // nop
patch=0,EE,01E5F7D0,word,0c797a0a // jal	1e5e828 <etl::vector_base::capacity() const [clone .constprop.0]>
patch=0,EE,01E5F7D4,word,00401825 // move	v1,v0
patch=0,EE,01E5F7D8,word,0062102b // sltu	v0,v1,v0
patch=0,EE,01E5F7DC,word,10400003 // beqz	v0,1e5f7ec <replace_OnCoinSmack(orig_COIN*)+0x4c>
patch=0,EE,01E5F7E0,word,00000000 // nop
patch=0,EE,01E5F7E4,word,0c797dd8 // jal	1e5f760 <void etl::ivector<rect_t>::emplace_back<>() [clone .constprop.0]>
patch=0,EE,01E5F7E8,word,00000000 // nop
patch=0,EE,01E5F7EC,word,2610ffff // addiu	s0,s0,-1
patch=0,EE,01E5F7F0,word,1600fff5 // bnez	s0,1e5f7c8 <replace_OnCoinSmack(orig_COIN*)+0x28>
patch=0,EE,01E5F7F4,word,00000000 // nop
patch=0,EE,01E5F7F8,word,3c100014 // lui	s0,0x14
patch=0,EE,01E5F7FC,word,3604dbc0 // ori	a0,s0,0xdbc0
patch=0,EE,01E5F800,word,0c797cfc // jal	1e5f3f0 <unhook(unsigned long)>
patch=0,EE,01E5F804,word,3610dbc0 // ori	s0,s0,0xdbc0
patch=0,EE,01E5F808,word,0200f809 // jalr	s0
patch=0,EE,01E5F80C,word,02202025 // move	a0,s1
patch=0,EE,01E5F810,word,dfbf0018 // ld	ra,24(sp)
patch=0,EE,01E5F814,word,dfb10010 // ld	s1,16(sp)
patch=0,EE,01E5F818,word,02002025 // move	a0,s0
patch=0,EE,01E5F81C,word,dfb00008 // ld	s0,8(sp)
patch=0,EE,01E5F820,word,08797d09 // j	1e5f424 <rehook(unsigned long)>
patch=0,EE,01E5F824,word,27bd0020 // addiu	sp,sp,32

// Function: rect_t::update_draw()
patch=0,EE,01E5F828,word,27bdffc0 // addiu	sp,sp,-64
patch=0,EE,01E5F82C,word,c480000c // lwc1	$f0,12(a0)
patch=0,EE,01E5F830,word,ffb20020 // sd	s2,32(sp)
patch=0,EE,01E5F834,word,3c1201e6 // lui	s2,0x1e6
patch=0,EE,01E5F838,word,8e420010 // lw	v0,16(s2)
patch=0,EE,01E5F83C,word,c44c0000 // lwc1	$f12,0(v0)
patch=0,EE,01E5F840,word,ffb10018 // sd	s1,24(sp)
patch=0,EE,01E5F844,word,3c110022 // lui	s1,0x22
patch=0,EE,01E5F848,word,ffbf0038 // sd	ra,56(sp)
patch=0,EE,01E5F84C,word,46006302 // mul.s	$f12,$f12,$f0
patch=0,EE,01E5F850,word,ffb40030 // sd	s4,48(sp)
patch=0,EE,01E5F854,word,ffb30028 // sd	s3,40(sp)
patch=0,EE,01E5F858,word,26331db0 // addiu	s3,s1,7600
patch=0,EE,01E5F85C,word,ffb00010 // sd	s0,16(sp)
patch=0,EE,01E5F860,word,00808025 // move	s0,a0
patch=0,EE,01E5F864,word,26311ca8 // addiu	s1,s1,7336
patch=0,EE,01E5F868,word,0260f809 // jalr	s3
patch=0,EE,01E5F86C,word,3c1401e6 // lui	s4,0x1e6
patch=0,EE,01E5F870,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5F874,word,c441ff48 // lwc1	$f1,-184(v0)
patch=0,EE,01E5F878,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5F87C,word,46010002 // mul.s	$f0,$f0,$f1
patch=0,EE,01E5F880,word,c441ff4c // lwc1	$f1,-180(v0)
patch=0,EE,01E5F884,word,8e420010 // lw	v0,16(s2)
patch=0,EE,01E5F888,word,46010000 // add.s	$f0,$f0,$f1
patch=0,EE,01E5F88C,word,e6000008 // swc1	$f0,8(s0)
patch=0,EE,01E5F890,word,c600001c // lwc1	$f0,28(s0)
patch=0,EE,01E5F894,word,c44c0000 // lwc1	$f12,0(v0)
patch=0,EE,01E5F898,word,0260f809 // jalr	s3
patch=0,EE,01E5F89C,word,46006302 // mul.s	$f12,$f12,$f0
patch=0,EE,01E5F8A0,word,0220f809 // jalr	s1
patch=0,EE,01E5F8A4,word,46000306 // mov.s	$f12,$f0
patch=0,EE,01E5F8A8,word,c681ff50 // lwc1	$f1,-176(s4)
patch=0,EE,01E5F8AC,word,3c1101e6 // lui	s1,0x1e6
patch=0,EE,01E5F8B0,word,46010002 // mul.s	$f0,$f0,$f1
patch=0,EE,01E5F8B4,word,c621ff54 // lwc1	$f1,-172(s1)
patch=0,EE,01E5F8B8,word,46000836 // c.le.s	$f1,$f0
patch=0,EE,01E5F8BC,word,00000000 // nop
patch=0,EE,01E5F8C0,word,4501007b // bc1t	1e5fab0 <rect_t::update_draw()+0x288>
patch=0,EE,01E5F8C4,word,00000000 // nop
patch=0,EE,01E5F8C8,word,46000024 // trunc.w.s	$f0,$f0
patch=0,EE,01E5F8CC,word,44020000 // mfc1	v0,$f0
patch=0,EE,01E5F8D0,word,00000000 // nop
patch=0,EE,01E5F8D4,word,a2020018 // sb	v0,24(s0)
patch=0,EE,01E5F8D8,word,c6000020 // lwc1	$f0,32(s0)
patch=0,EE,01E5F8DC,word,8e420010 // lw	v0,16(s2)
patch=0,EE,01E5F8E0,word,3c130022 // lui	s3,0x22
patch=0,EE,01E5F8E4,word,c44c0000 // lwc1	$f12,0(v0)
patch=0,EE,01E5F8E8,word,26621db0 // addiu	v0,s3,7600
patch=0,EE,01E5F8EC,word,26731ca8 // addiu	s3,s3,7336
patch=0,EE,01E5F8F0,word,0040f809 // jalr	v0
patch=0,EE,01E5F8F4,word,46006302 // mul.s	$f12,$f12,$f0
patch=0,EE,01E5F8F8,word,0260f809 // jalr	s3
patch=0,EE,01E5F8FC,word,46000306 // mov.s	$f12,$f0
patch=0,EE,01E5F900,word,c681ff50 // lwc1	$f1,-176(s4)
patch=0,EE,01E5F904,word,46010002 // mul.s	$f0,$f0,$f1
patch=0,EE,01E5F908,word,c621ff54 // lwc1	$f1,-172(s1)
patch=0,EE,01E5F90C,word,46000836 // c.le.s	$f1,$f0
patch=0,EE,01E5F910,word,00000000 // nop
patch=0,EE,01E5F914,word,4501006d // bc1t	1e5facc <rect_t::update_draw()+0x2a4>
patch=0,EE,01E5F918,word,00000000 // nop
patch=0,EE,01E5F91C,word,46000024 // trunc.w.s	$f0,$f0
patch=0,EE,01E5F920,word,44020000 // mfc1	v0,$f0
patch=0,EE,01E5F924,word,00000000 // nop
patch=0,EE,01E5F928,word,a2020019 // sb	v0,25(s0)
patch=0,EE,01E5F92C,word,c6000024 // lwc1	$f0,36(s0)
patch=0,EE,01E5F930,word,8e420010 // lw	v0,16(s2)
patch=0,EE,01E5F934,word,3c130022 // lui	s3,0x22
patch=0,EE,01E5F938,word,c44c0000 // lwc1	$f12,0(v0)
patch=0,EE,01E5F93C,word,26621db0 // addiu	v0,s3,7600
patch=0,EE,01E5F940,word,26731ca8 // addiu	s3,s3,7336
patch=0,EE,01E5F944,word,0040f809 // jalr	v0
patch=0,EE,01E5F948,word,46006302 // mul.s	$f12,$f12,$f0
patch=0,EE,01E5F94C,word,0260f809 // jalr	s3
patch=0,EE,01E5F950,word,46000306 // mov.s	$f12,$f0
patch=0,EE,01E5F954,word,c681ff50 // lwc1	$f1,-176(s4)
patch=0,EE,01E5F958,word,46010002 // mul.s	$f0,$f0,$f1
patch=0,EE,01E5F95C,word,c621ff54 // lwc1	$f1,-172(s1)
patch=0,EE,01E5F960,word,46000836 // c.le.s	$f1,$f0
patch=0,EE,01E5F964,word,00000000 // nop
patch=0,EE,01E5F968,word,4501005f // bc1t	1e5fae8 <rect_t::update_draw()+0x2c0>
patch=0,EE,01E5F96C,word,00000000 // nop
patch=0,EE,01E5F970,word,46000024 // trunc.w.s	$f0,$f0
patch=0,EE,01E5F974,word,44020000 // mfc1	v0,$f0
patch=0,EE,01E5F978,word,00000000 // nop
patch=0,EE,01E5F97C,word,a202001a // sb	v0,26(s0)
patch=0,EE,01E5F980,word,c6000028 // lwc1	$f0,40(s0)
patch=0,EE,01E5F984,word,8e420010 // lw	v0,16(s2)
patch=0,EE,01E5F988,word,3c120022 // lui	s2,0x22
patch=0,EE,01E5F98C,word,c44c0000 // lwc1	$f12,0(v0)
patch=0,EE,01E5F990,word,26421db0 // addiu	v0,s2,7600
patch=0,EE,01E5F994,word,26521ca8 // addiu	s2,s2,7336
patch=0,EE,01E5F998,word,0040f809 // jalr	v0
patch=0,EE,01E5F99C,word,46006302 // mul.s	$f12,$f12,$f0
patch=0,EE,01E5F9A0,word,0240f809 // jalr	s2
patch=0,EE,01E5F9A4,word,46000306 // mov.s	$f12,$f0
patch=0,EE,01E5F9A8,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5F9AC,word,c441ff58 // lwc1	$f1,-168(v0)
patch=0,EE,01E5F9B0,word,46010002 // mul.s	$f0,$f0,$f1
patch=0,EE,01E5F9B4,word,c621ff54 // lwc1	$f1,-172(s1)
patch=0,EE,01E5F9B8,word,46000836 // c.le.s	$f1,$f0
patch=0,EE,01E5F9BC,word,00000000 // nop
patch=0,EE,01E5F9C0,word,45010050 // bc1t	1e5fb04 <rect_t::update_draw()+0x2dc>
patch=0,EE,01E5F9C4,word,00000000 // nop
patch=0,EE,01E5F9C8,word,46000024 // trunc.w.s	$f0,$f0
patch=0,EE,01E5F9CC,word,44020000 // mfc1	v0,$f0
patch=0,EE,01E5F9D0,word,00000000 // nop
patch=0,EE,01E5F9D4,word,a202001b // sb	v0,27(s0)
patch=0,EE,01E5F9D8,word,c6000000 // lwc1	$f0,0(s0)
patch=0,EE,01E5F9DC,word,9202002c // lbu	v0,44(s0)
patch=0,EE,01E5F9E0,word,c6010010 // lwc1	$f1,16(s0)
patch=0,EE,01E5F9E4,word,30430001 // andi	v1,v0,0x1
patch=0,EE,01E5F9E8,word,1060004d // beqz	v1,1e5fb20 <rect_t::update_draw()+0x2f8>
patch=0,EE,01E5F9EC,word,00000000 // nop
patch=0,EE,01E5F9F0,word,3c0301e6 // lui	v1,0x1e6
patch=0,EE,01E5F9F4,word,46010000 // add.s	$f0,$f0,$f1
patch=0,EE,01E5F9F8,word,c6020008 // lwc1	$f2,8(s0)
patch=0,EE,01E5F9FC,word,304200fe // andi	v0,v0,0xfe
patch=0,EE,01E5FA00,word,c461ff3c // lwc1	$f1,-196(v1)
patch=0,EE,01E5FA04,word,46020841 // sub.s	$f1,$f1,$f2
patch=0,EE,01E5FA08,word,e6000000 // swc1	$f0,0(s0)
patch=0,EE,01E5FA0C,word,46000836 // c.le.s	$f1,$f0
patch=0,EE,01E5FA10,word,00000000 // nop
patch=0,EE,01E5FA14,word,4501004a // bc1t	1e5fb40 <rect_t::update_draw()+0x318>
patch=0,EE,01E5FA18,word,00000000 // nop
patch=0,EE,01E5FA1C,word,9202002c // lbu	v0,44(s0)
patch=0,EE,01E5FA20,word,c6000004 // lwc1	$f0,4(s0)
patch=0,EE,01E5FA24,word,30430002 // andi	v1,v0,0x2
patch=0,EE,01E5FA28,word,1060004a // beqz	v1,1e5fb54 <rect_t::update_draw()+0x32c>
patch=0,EE,01E5FA2C,word,c6010014 // lwc1	$f1,20(s0)
patch=0,EE,01E5FA30,word,3c0301e6 // lui	v1,0x1e6
patch=0,EE,01E5FA34,word,46010000 // add.s	$f0,$f0,$f1
patch=0,EE,01E5FA38,word,c6020008 // lwc1	$f2,8(s0)
patch=0,EE,01E5FA3C,word,304200fd // andi	v0,v0,0xfd
patch=0,EE,01E5FA40,word,c461ff40 // lwc1	$f1,-192(v1)
patch=0,EE,01E5FA44,word,46020841 // sub.s	$f1,$f1,$f2
patch=0,EE,01E5FA48,word,e6000004 // swc1	$f0,4(s0)
patch=0,EE,01E5FA4C,word,46000836 // c.le.s	$f1,$f0
patch=0,EE,01E5FA50,word,00000000 // nop
patch=0,EE,01E5FA54,word,45010047 // bc1t	1e5fb74 <rect_t::update_draw()+0x34c>
patch=0,EE,01E5FA58,word,00000000 // nop
patch=0,EE,01E5FA5C,word,c6120008 // lwc1	$f18,8(s0)
patch=0,EE,01E5FA60,word,3c020027 // lui	v0,0x27
patch=0,EE,01E5FA64,word,c6100000 // lwc1	$f16,0(s0)
patch=0,EE,01E5FA68,word,244260e0 // addiu	v0,v0,24800
patch=0,EE,01E5FA6C,word,c6110004 // lwc1	$f17,4(s0)
patch=0,EE,01E5FA70,word,afa20000 // sw	v0,0(sp)
patch=0,EE,01E5FA74,word,9207001b // lbu	a3,27(s0)
patch=0,EE,01E5FA78,word,461194c0 // add.s	$f19,$f18,$f17
patch=0,EE,01E5FA7C,word,9206001a // lbu	a2,26(s0)
patch=0,EE,01E5FA80,word,46109480 // add.s	$f18,$f18,$f16
patch=0,EE,01E5FA84,word,92050019 // lbu	a1,25(s0)
patch=0,EE,01E5FA88,word,0c797d5c // jal	1e5f570 <wrap_FillScreenRect(int, int, int, int, float, float, float, float, orig_GIFS*)>
patch=0,EE,01E5FA8C,word,92040018 // lbu	a0,24(s0)
patch=0,EE,01E5FA90,word,dfbf0038 // ld	ra,56(sp)
patch=0,EE,01E5FA94,word,dfb40030 // ld	s4,48(sp)
patch=0,EE,01E5FA98,word,dfb30028 // ld	s3,40(sp)
patch=0,EE,01E5FA9C,word,dfb20020 // ld	s2,32(sp)
patch=0,EE,01E5FAA0,word,dfb10018 // ld	s1,24(sp)
patch=0,EE,01E5FAA4,word,dfb00010 // ld	s0,16(sp)
patch=0,EE,01E5FAA8,word,03e00008 // jr	ra
patch=0,EE,01E5FAAC,word,27bd0040 // addiu	sp,sp,64
patch=0,EE,01E5FAB0,word,46010001 // sub.s	$f0,$f0,$f1
patch=0,EE,01E5FAB4,word,3c038000 // lui	v1,0x8000
patch=0,EE,01E5FAB8,word,46000024 // trunc.w.s	$f0,$f0
patch=0,EE,01E5FABC,word,44020000 // mfc1	v0,$f0
patch=0,EE,01E5FAC0,word,00000000 // nop
patch=0,EE,01E5FAC4,word,1000ff83 // b	1e5f8d4 <rect_t::update_draw()+0xac>
patch=0,EE,01E5FAC8,word,00431025 // or	v0,v0,v1
patch=0,EE,01E5FACC,word,46010001 // sub.s	$f0,$f0,$f1
patch=0,EE,01E5FAD0,word,3c038000 // lui	v1,0x8000
patch=0,EE,01E5FAD4,word,46000024 // trunc.w.s	$f0,$f0
patch=0,EE,01E5FAD8,word,44020000 // mfc1	v0,$f0
patch=0,EE,01E5FADC,word,00000000 // nop
patch=0,EE,01E5FAE0,word,1000ff91 // b	1e5f928 <rect_t::update_draw()+0x100>
patch=0,EE,01E5FAE4,word,00431025 // or	v0,v0,v1
patch=0,EE,01E5FAE8,word,46010001 // sub.s	$f0,$f0,$f1
patch=0,EE,01E5FAEC,word,3c038000 // lui	v1,0x8000
patch=0,EE,01E5FAF0,word,46000024 // trunc.w.s	$f0,$f0
patch=0,EE,01E5FAF4,word,44020000 // mfc1	v0,$f0
patch=0,EE,01E5FAF8,word,00000000 // nop
patch=0,EE,01E5FAFC,word,1000ff9f // b	1e5f97c <rect_t::update_draw()+0x154>
patch=0,EE,01E5FB00,word,00431025 // or	v0,v0,v1
patch=0,EE,01E5FB04,word,46010001 // sub.s	$f0,$f0,$f1
patch=0,EE,01E5FB08,word,3c038000 // lui	v1,0x8000
patch=0,EE,01E5FB0C,word,46000024 // trunc.w.s	$f0,$f0
patch=0,EE,01E5FB10,word,44020000 // mfc1	v0,$f0
patch=0,EE,01E5FB14,word,00000000 // nop
patch=0,EE,01E5FB18,word,1000ffae // b	1e5f9d4 <rect_t::update_draw()+0x1ac>
patch=0,EE,01E5FB1C,word,00431025 // or	v0,v0,v1
patch=0,EE,01E5FB20,word,46010001 // sub.s	$f0,$f0,$f1
patch=0,EE,01E5FB24,word,44800800 // mtc1	zero,$f1
patch=0,EE,01E5FB28,word,00000000 // nop
patch=0,EE,01E5FB2C,word,46010036 // c.le.s	$f0,$f1
patch=0,EE,01E5FB30,word,e6000000 // swc1	$f0,0(s0)
patch=0,EE,01E5FB34,word,4500ffb9 // bc1f	1e5fa1c <rect_t::update_draw()+0x1f4>
patch=0,EE,01E5FB38,word,00000000 // nop
patch=0,EE,01E5FB3C,word,34420001 // ori	v0,v0,0x1
patch=0,EE,01E5FB40,word,a202002c // sb	v0,44(s0)
patch=0,EE,01E5FB44,word,0c797d84 // jal	1e5f610 <rect_t::randomize_velocity()>
patch=0,EE,01E5FB48,word,02002025 // move	a0,s0
patch=0,EE,01E5FB4C,word,1000ffb3 // b	1e5fa1c <rect_t::update_draw()+0x1f4>
patch=0,EE,01E5FB50,word,00000000 // nop
patch=0,EE,01E5FB54,word,46010001 // sub.s	$f0,$f0,$f1
patch=0,EE,01E5FB58,word,44800800 // mtc1	zero,$f1
patch=0,EE,01E5FB5C,word,00000000 // nop
patch=0,EE,01E5FB60,word,46010036 // c.le.s	$f0,$f1
patch=0,EE,01E5FB64,word,e6000004 // swc1	$f0,4(s0)
patch=0,EE,01E5FB68,word,4500ffbc // bc1f	1e5fa5c <rect_t::update_draw()+0x234>
patch=0,EE,01E5FB6C,word,00000000 // nop
patch=0,EE,01E5FB70,word,34420002 // ori	v0,v0,0x2
patch=0,EE,01E5FB74,word,a202002c // sb	v0,44(s0)
patch=0,EE,01E5FB78,word,0c797d84 // jal	1e5f610 <rect_t::randomize_velocity()>
patch=0,EE,01E5FB7C,word,02002025 // move	a0,s0
patch=0,EE,01E5FB80,word,1000ffb6 // b	1e5fa5c <rect_t::update_draw()+0x234>
patch=0,EE,01E5FB84,word,00000000 // nop

// Function: replace_DrawPlayerSuck()
patch=0,EE,01E5FB88,word,27bdffe0 // addiu	sp,sp,-32
patch=0,EE,01E5FB8C,word,ffb10008 // sd	s1,8(sp)
patch=0,EE,01E5FB90,word,3c110027 // lui	s1,0x27
patch=0,EE,01E5FB94,word,8e2275d8 // lw	v0,30168(s1)
patch=0,EE,01E5FB98,word,2c430004 // sltiu	v1,v0,4
patch=0,EE,01E5FB9C,word,ffbf0018 // sd	ra,24(sp)
patch=0,EE,01E5FBA0,word,ffb20010 // sd	s2,16(sp)
patch=0,EE,01E5FBA4,word,1460000d // bnez	v1,1e5fbdc <replace_DrawPlayerSuck()+0x54>
patch=0,EE,01E5FBA8,word,ffb00000 // sd	s0,0(sp)
patch=0,EE,01E5FBAC,word,0c7979ab // jal	1e5e6ac <etl::ivector<rect_t>::begin() [clone .constprop.0]>
patch=0,EE,01E5FBB0,word,00000000 // nop
patch=0,EE,01E5FBB4,word,0c7979a8 // jal	1e5e6a0 <etl::ivector<rect_t>::end() [clone .constprop.0]>
patch=0,EE,01E5FBB8,word,00408025 // move	s0,v0
patch=0,EE,01E5FBBC,word,00408825 // move	s1,v0
patch=0,EE,01E5FBC0,word,1211003a // beq	s0,s1,1e5fcac <replace_DrawPlayerSuck()+0x124>
patch=0,EE,01E5FBC4,word,00000000 // nop
patch=0,EE,01E5FBC8,word,02002025 // move	a0,s0
patch=0,EE,01E5FBCC,word,0c797e0a // jal	1e5f828 <rect_t::update_draw()>
patch=0,EE,01E5FBD0,word,26100030 // addiu	s0,s0,48
patch=0,EE,01E5FBD4,word,1000fffa // b	1e5fbc0 <replace_DrawPlayerSuck()+0x38>
patch=0,EE,01E5FBD8,word,00000000 // nop
patch=0,EE,01E5FBDC,word,1040002e // beqz	v0,1e5fc98 <replace_DrawPlayerSuck()+0x110>
patch=0,EE,01E5FBE0,word,00000000 // nop
patch=0,EE,01E5FBE4,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5FBE8,word,3c1001e6 // lui	s0,0x1e6
patch=0,EE,01E5FBEC,word,c440ff5c // lwc1	$f0,-164(v0)
patch=0,EE,01E5FBF0,word,2610fff0 // addiu	s0,s0,-16
patch=0,EE,01E5FBF4,word,3c120016 // lui	s2,0x16
patch=0,EE,01E5FBF8,word,3c0501e6 // lui	a1,0x1e6
patch=0,EE,01E5FBFC,word,e600000c // swc1	$f0,12(s0)
patch=0,EE,01E5FC00,word,26524340 // addiu	s2,s2,17216
patch=0,EE,01E5FC04,word,262860e0 // addiu	a4,s1,24800
patch=0,EE,01E5FC08,word,00003825 // move	a3,zero
patch=0,EE,01E5FC0C,word,02003025 // move	a2,s0
patch=0,EE,01E5FC10,word,24a5ff18 // addiu	a1,a1,-232
patch=0,EE,01E5FC14,word,0240f809 // jalr	s2
patch=0,EE,01E5FC18,word,8e2460d0 // lw	a0,24784(s1)
patch=0,EE,01E5FC1C,word,8e2275d8 // lw	v0,30168(s1)
patch=0,EE,01E5FC20,word,2c420002 // sltiu	v0,v0,2
patch=0,EE,01E5FC24,word,1440000b // bnez	v0,1e5fc54 <replace_DrawPlayerSuck()+0xcc>
patch=0,EE,01E5FC28,word,00000000 // nop
patch=0,EE,01E5FC2C,word,3c0201e6 // lui	v0,0x1e6
patch=0,EE,01E5FC30,word,3c0501e6 // lui	a1,0x1e6
patch=0,EE,01E5FC34,word,c440ff60 // lwc1	$f0,-160(v0)
patch=0,EE,01E5FC38,word,362860e0 // ori	a4,s1,0x60e0
patch=0,EE,01E5FC3C,word,00003825 // move	a3,zero
patch=0,EE,01E5FC40,word,02003025 // move	a2,s0
patch=0,EE,01E5FC44,word,e600000c // swc1	$f0,12(s0)
patch=0,EE,01E5FC48,word,24a5ff20 // addiu	a1,a1,-224
patch=0,EE,01E5FC4C,word,0240f809 // jalr	s2
patch=0,EE,01E5FC50,word,8e2460d0 // lw	a0,24784(s1)
patch=0,EE,01E5FC54,word,3c020027 // lui	v0,0x27
patch=0,EE,01E5FC58,word,8c4375d8 // lw	v1,30168(v0)
patch=0,EE,01E5FC5C,word,2c630003 // sltiu	v1,v1,3
patch=0,EE,01E5FC60,word,1460000d // bnez	v1,1e5fc98 <replace_DrawPlayerSuck()+0x110>
patch=0,EE,01E5FC64,word,00000000 // nop
patch=0,EE,01E5FC68,word,3c0301e6 // lui	v1,0x1e6
patch=0,EE,01E5FC6C,word,244860e0 // addiu	a4,v0,24800
patch=0,EE,01E5FC70,word,c460ff40 // lwc1	$f0,-192(v1)
patch=0,EE,01E5FC74,word,3c0501e6 // lui	a1,0x1e6
patch=0,EE,01E5FC78,word,8c4460d0 // lw	a0,24784(v0)
patch=0,EE,01E5FC7C,word,3c020016 // lui	v0,0x16
patch=0,EE,01E5FC80,word,e600000c // swc1	$f0,12(s0)
patch=0,EE,01E5FC84,word,00003825 // move	a3,zero
patch=0,EE,01E5FC88,word,02003025 // move	a2,s0
patch=0,EE,01E5FC8C,word,24424340 // addiu	v0,v0,17216
patch=0,EE,01E5FC90,word,0040f809 // jalr	v0
patch=0,EE,01E5FC94,word,24a5ff28 // addiu	a1,a1,-216
patch=0,EE,01E5FC98,word,3c020027 // lui	v0,0x27
patch=0,EE,01E5FC9C,word,8c4275d8 // lw	v0,30168(v0)
patch=0,EE,01E5FCA0,word,2c420004 // sltiu	v0,v0,4
patch=0,EE,01E5FCA4,word,1040ffc1 // beqz	v0,1e5fbac <replace_DrawPlayerSuck()+0x24>
patch=0,EE,01E5FCA8,word,00000000 // nop
patch=0,EE,01E5FCAC,word,dfbf0018 // ld	ra,24(sp)
patch=0,EE,01E5FCB0,word,dfb20010 // ld	s2,16(sp)
patch=0,EE,01E5FCB4,word,dfb10008 // ld	s1,8(sp)
patch=0,EE,01E5FCB8,word,dfb00000 // ld	s0,0(sp)
patch=0,EE,01E5FCBC,word,03e00008 // jr	ra
patch=0,EE,01E5FCC0,word,27bd0020 // addiu	sp,sp,32

// Function: setup()
// BOOTSTRAP
patch=0,EE,00100008,word,08797f31 // jal	setup()
patch=0,EE,0010000C,word,00000000 // nop
// BOOTSTRAP END
patch=0,EE,01E5FCC4,word,27bdfff0 // addiu	sp,sp,-16
patch=0,EE,01E5FCC8,word,3c0201e5 // lui	v0,0x1e5
patch=0,EE,01E5FCCC,word,3442e008 // ori	v0,v0,0xe008
patch=0,EE,01E5FCD0,word,ffbf0008 // sd	ra,8(sp)
patch=0,EE,01E5FCD4,word,0040f809 // jalr	v0
patch=0,EE,01E5FCD8,word,00000000 // nop
patch=0,EE,01E5FCDC,word,0c797a97 // jal	1e5ea5c <void etl::error_handler::set_callback<&(etl_error_handler(etl::exception const&))>()>
patch=0,EE,01E5FCE0,word,3c0501e6 // lui	a1,0x1e6
patch=0,EE,01E5FCE4,word,0c797a99 // jal	1e5ea64 <ta_init(void const*, void const*, unsigned int, unsigned int, unsigned int) [clone .constprop.0] [clone .isra.0]>
patch=0,EE,01E5FCE8,word,24a5f4ec // addiu	a1,a1,-2836
patch=0,EE,01E5FCEC,word,3c040019 // lui	a0,0x19
patch=0,EE,01E5FCF0,word,0c797ce6 // jal	1e5f398 <hook(unsigned long, unsigned long)>
patch=0,EE,01E5FCF4,word,24842770 // addiu	a0,a0,10096
patch=0,EE,01E5FCF8,word,3c0501e6 // lui	a1,0x1e6
patch=0,EE,01E5FCFC,word,3c04001b // lui	a0,0x1b
patch=0,EE,01E5FD00,word,24a5fb88 // addiu	a1,a1,-1144
patch=0,EE,01E5FD04,word,0c797ce6 // jal	1e5f398 <hook(unsigned long, unsigned long)>
patch=0,EE,01E5FD08,word,3484d898 // ori	a0,a0,0xd898
patch=0,EE,01E5FD0C,word,3c020028 // lui	v0,0x28
patch=0,EE,01E5FD10,word,344290f0 // ori	v0,v0,0x90f0
patch=0,EE,01E5FD14,word,24030001 // li	v1,1
patch=0,EE,01E5FD18,word,3c0501e6 // lui	a1,0x1e6
patch=0,EE,01E5FD1C,word,3c040014 // lui	a0,0x14
patch=0,EE,01E5FD20,word,ac430000 // sw	v1,0(v0)
patch=0,EE,01E5FD24,word,24a5f7a0 // addiu	a1,a1,-2144
patch=0,EE,01E5FD28,word,0c797ce6 // jal	1e5f398 <hook(unsigned long, unsigned long)>
patch=0,EE,01E5FD2C,word,3484dbc0 // ori	a0,a0,0xdbc0
patch=0,EE,01E5FD30,word,3c033c02 // lui	v1,0x3c02
patch=0,EE,01E5FD34,word,3c020010 // lui	v0,0x10
patch=0,EE,01E5FD38,word,2463002a // addiu	v1,v1,42
patch=0,EE,01E5FD3C,word,ac430008 // sw	v1,8(v0)
patch=0,EE,01E5FD40,word,3c033c03 // lui	v1,0x3c03
patch=0,EE,01E5FD44,word,24630068 // addiu	v1,v1,104
patch=0,EE,01E5FD48,word,dfbf0008 // ld	ra,8(sp)
patch=0,EE,01E5FD4C,word,ac43000c // sw	v1,12(v0)
patch=0,EE,01E5FD50,word,24590008 // addiu	t9,v0,8
patch=0,EE,01E5FD54,word,03200008 // jr	t9
patch=0,EE,01E5FD58,word,27bd0010 // addiu	sp,sp,16
patch=0,EE,01E5FD5C,word,00000000 // nop

// .rodata / .sdata / etc:
patch=0,EE,01E5FDF8,word,73706564
patch=0,EE,01E5FDFC,word,6c74652f
patch=0,EE,01E5FE00,word,636e692f
patch=0,EE,01E5FE04,word,6564756c
patch=0,EE,01E5FE08,word,6c74652f
patch=0,EE,01E5FE0C,word,6f70692f
patch=0,EE,01E5FE10,word,682e6c6f
patch=0,EE,01E5FE14,word,00000000
patch=0,EE,01E5FE18,word,6c6f6f70
patch=0,EE,01E5FE1C,word,656c653a
patch=0,EE,01E5FE20,word,746e656d
patch=0,EE,01E5FE24,word,7a697320
patch=0,EE,01E5FE28,word,00000065
patch=0,EE,01E5FE2C,word,00000000
patch=0,EE,01E5FE30,word,6c6f6f70
patch=0,EE,01E5FE34,word,746f6e3a
patch=0,EE,01E5FE38,word,206e6920
patch=0,EE,01E5FE3C,word,6c6f6f70
patch=0,EE,01E5FE40,word,00000000
patch=0,EE,01E5FE44,word,00000000
patch=0,EE,01E5FE48,word,6c6f6f70
patch=0,EE,01E5FE4C,word,6c6c613a
patch=0,EE,01E5FE50,word,7461636f
patch=0,EE,01E5FE54,word,006e6f69
patch=0,EE,01E5FE58,word,74616c66
patch=0,EE,01E5FE5C,word,70616d5f
patch=0,EE,01E5FE60,word,7566203a
patch=0,EE,01E5FE64,word,00006c6c
patch=0,EE,01E5FE68,word,73706564
patch=0,EE,01E5FE6C,word,6c74652f
patch=0,EE,01E5FE70,word,636e692f
patch=0,EE,01E5FE74,word,6564756c
patch=0,EE,01E5FE78,word,6c74652f
patch=0,EE,01E5FE7C,word,6972702f
patch=0,EE,01E5FE80,word,65746176
patch=0,EE,01E5FE84,word,6f76702f
patch=0,EE,01E5FE88,word,65766469
patch=0,EE,01E5FE8C,word,726f7463
patch=0,EE,01E5FE90,word,0000682e
patch=0,EE,01E5FE94,word,00000000
patch=0,EE,01E5FE98,word,74636576
patch=0,EE,01E5FE9C,word,663a726f
patch=0,EE,01E5FEA0,word,006c6c75
patch=0,EE,01E5FEA4,word,00000000
patch=0,EE,01E5FEA8,word,73706564
patch=0,EE,01E5FEAC,word,6c74652f
patch=0,EE,01E5FEB0,word,636e692f
patch=0,EE,01E5FEB4,word,6564756c
patch=0,EE,01E5FEB8,word,6c74652f
patch=0,EE,01E5FEBC,word,6665722f
patch=0,EE,01E5FEC0,word,6e657265
patch=0,EE,01E5FEC4,word,665f6563
patch=0,EE,01E5FEC8,word,5f74616c
patch=0,EE,01E5FECC,word,2e70616d
patch=0,EE,01E5FED0,word,00000068
patch=0,EE,01E5FED4,word,00000000
patch=0,EE,01E5FED8,word,73706564
patch=0,EE,01E5FEDC,word,6c74652f
patch=0,EE,01E5FEE0,word,636e692f
patch=0,EE,01E5FEE4,word,6564756c
patch=0,EE,01E5FEE8,word,6c74652f
patch=0,EE,01E5FEEC,word,616c662f
patch=0,EE,01E5FEF0,word,616d5f74
patch=0,EE,01E5FEF4,word,00682e70
patch=0,EE,01E5FEF8,word,2d657250
patch=0,EE,01E5FEFC,word,72617453
patch=0,EE,01E5FF00,word,00707574
patch=0,EE,01E5FF04,word,00000000
patch=0,EE,01E5FF08,word,74736f50
patch=0,EE,01E5FF0C,word,6174532d
patch=0,EE,01E5FF10,word,70757472
patch=0,EE,01E5FF14,word,00000000
patch=0,EE,01E5FF18,word,00746567
patch=0,EE,01E5FF1C,word,00000000
patch=0,EE,01E5FF20,word,656e776f
patch=0,EE,01E5FF24,word,00000064
patch=0,EE,01E5FF28,word,6f616d6c
patch=0,EE,01E5FF2C,word,00000000
patch=0,EE,01E5FF30,word,4effffff
patch=0,EE,01E5FF34,word,3f000000
patch=0,EE,01E5FF38,word,40533333
patch=0,EE,01E5FF3C,word,44200000
patch=0,EE,01E5FF40,word,43f40000
patch=0,EE,01E5FF44,word,3dcccccc
patch=0,EE,01E5FF48,word,42480000
patch=0,EE,01E5FF4C,word,42a00000
patch=0,EE,01E5FF50,word,437f0000
patch=0,EE,01E5FF54,word,4f000000
patch=0,EE,01E5FF58,word,43000000
patch=0,EE,01E5FF5C,word,4322aaaa
patch=0,EE,01E5FF60,word,43a2aaaa
patch=0,EE,01E5FFE4,word,01e5e008
patch=0,EE,01E5FFE8,word,01e5e000
patch=0,EE,01E5FFF0,word,00000000
patch=0,EE,01E5FFF4,word,00000000
patch=0,EE,01E5FFF8,word,44200000
patch=0,EE,01E5FFFC,word,43f40000
patch=0,EE,01E60000,word,ffffffff
patch=0,EE,01E60004,word,3f800000
patch=0,EE,01E60008,word,3f800000
